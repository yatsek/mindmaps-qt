#LyX 1.6.8 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language polish
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
\size largest
Wyższa Szkoła Komunikacji i Zarządzania w Poznaniu
\end_layout

\begin_layout Standard
\align center
Instytut Informatyki
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Wojciech Jurkowlaniec
\end_layout

\begin_layout Standard
\align center
nr albumu: 17373
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Aplikacja wspomagająca szybkie uczenie się oraz zapamiętywanie informacji
 w oparciu o technikę Mind Mappingu
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Praca dyplomowa inżynierska
\end_layout

\begin_layout Standard
\align center
kierunek: Informatyka
\end_layout

\begin_layout Standard
\align center
specjalność: Technologie i zastosowania internetu
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Promotor:
\end_layout

\begin_layout Standard
\align center
dr inż.
 Ewa Idzikowska
\end_layout

\begin_layout Standard
\align center
Instytut Informatyki
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Poznań 2011
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Spis rysunków
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.1 Przykład sieci semantycznej
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.2 Funkcje półkul mózgowych
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.3 Przykładowa mapa pamięci
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.1 Wygląd interfejsu użytkownika programu XMind
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.2 Wygląd interfejsu użytkownika programu FreeMind
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.3 Wygląd interfejsu użytkownika programu Buzan's iMindMap
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.1
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.2
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.3
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.4
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wstęp
\end_layout

\begin_layout Subsection
Opis problemu i koncepcja jego rozwiązania
\end_layout

\begin_layout Subparagraph
Żyjemy w czasach, gdzie komputery stały się łatwo dostępnym i używanym na
 co dzień narzędziem pracy czy rozrywki.
 Wykorzystuje się je do rozrywki, wzajemnej komunikacji, pogłębiania zainteresow
ań, a także do nauki.
 Internet stał się nieograniczonym źródłem informacji, w którym niekiedy
 trudno się odnaleźć.
 Spowodane jest to ogromną ilością dostępnych danych, przez co ich przyswajanie,
 czyli nauka staje się problematyczna.
\end_layout

\begin_layout Subparagraph
Najpopularniejszą metodą uczenia się jest notowanie mówionego słowa, a następnie
 powtarzanie przez wieloktrotne czytanie.
 Jednakże nie jest to technika efektywna dla wszystkich.
 Dlatego alternatywą może być wykorzystanie 
\emph on
Mind Mappingu
\emph default
, który pozwala na zapamiętanie większej ilości informacji w krótszym czasie.
 Sprawia, że tworzenie notatek jest mniej uciążliwe, a system powtórek pozwala
 na zapamiętanie informacji o dowolnej złożoności długofalowo.
\end_layout

\begin_layout Subsection
Cel i zakres pracy
\end_layout

\begin_layout Subparagraph
Celem niniejszej pracy jest opracowanie aplikacji umożliwiającej wspomaganie
 procesu uczenia się, przy wykorzystaniu metod efektywnej nauki.
 Program będzie oparty o tworzenie map pamięci, system powtórek oraz funkcjonaln
ość szybkiego tworzenia ww.
 Map przy pomocy przeglądarki internetowej.
 Zostanie również przeprowadzona analiza ergonomii interfejsu użytkownika
 programu oraz objaśnienie działania tej techniki.
\end_layout

\begin_layout Subsection
Omówienie pracy
\end_layout

\begin_layout Paragraph
Praca została podzielona na dwie części - teoretyczną i praktyczną.
\end_layout

\begin_layout Subparagraph
Część teoretyczną obejmują rozdziały 2-4, gdzie zostaje objaśniona technika
 Mind Mappingu, omówienie procesów poznawczych towarzyszących nauce oraz
 wprowadzeniu do ergonomii interfejsu użytkownika wraz z analizą istniejących
 aplikacji wspomagających tworzenie map pamięci.
\end_layout

\begin_layout Subparagraph
TODO - opis rozdziałów części praktycznej
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Procesy poznawcze towarzyszące nauce
\end_layout

\begin_layout Subsection
Uwagi wstępne
\end_layout

\begin_layout Subparagraph
By dobrze zrozumieć pojęcia związane z mapami pamięci oraz efektywnym uczeniem
 się i zapamietywaniem potrzebne jest parę słów wstępu na temat procesów
 poznawczych.
 Ten rozdział jest podzielony na cztery podrozdziały które opisują poszczególny
 fazy związane z uczeniem się.
\end_layout

\begin_layout Subsection
Skupianie uwagi
\end_layout

\begin_layout Subparagraph
Skupianie uwagi jest pierwszym elementem towarzyszącym uczeniu się.
 Jest bardzo ważny, gdyż bez koncentracji nie można przyswajać informacji.
 By dobrze zrozumieć ten proces, należy przytoczyć dwie definicje.
\end_layout

\begin_layout Subparagraph

\emph on
Uwaga
\emph default
 to system odpowiedzialny za selekcję informacji i zapobieganie negatywnym
 skutkom przeładownia systemu poznawczego przez nadmiar danych [PSYCHO].
\end_layout

\begin_layout Subparagraph

\emph on
Świadomość
\emph default
 to zdawanie sobie przez podmiot sprawy z treści własnych procesów psychicznych
 [PSYCHO].
\end_layout

\begin_layout Subparagraph
Głównym elementem procesu skupiania uwagi jest 
\emph on
przeszukiwanie pola percepcyjnego
\emph default
.
 Mózg ludzki dokonuje tej czynności automatycznie.
 Przykładowo jak osoba stoi na ulicy w tłumie i szuka swojego znajomego,
 który ma na sobie czerwoną kurtkę, każde pojawienie się czerwonego koloru
 w zasięgu pola widzenia sprawia że osoba reaguje ze szczególną uwagą na
 te wystąpienia.
 Najłatwiej rozpoznaje się obiekty które posiadają cechy priorytetowe, różnią
 się od otoczenia kolorem, kształtem czy rozmiarem.
\end_layout

\begin_layout Subparagraph
Kolejnym ważnym elementem jest 
\emph on
podzielnośc uwagi
\emph default
, które ozacza dzielenie pewnej ograniczonej puli 
\begin_inset Quotes eld
\end_inset

mocy obliczeniowej
\begin_inset Quotes erd
\end_inset

 na więcej niż jedno zadanie.
 Jednak robienie paru rzeczy na raz musi spowodować zakłócenie przynajmniej
 jednej z nich, dlatego ważne jest by tych czynności nie było zbyt wiele.
\end_layout

\begin_layout Subparagraph
Również warto zwrócić uwagę na 
\emph on
przedłużoną koncentrację
\emph default
 (ang.
 sustained attention).
 Polega na zdolności utrzymania uwagi selektywnej przez dłuższy czas na
 tym samym aspekcie otoczenia.
 
\end_layout

\begin_layout Subsection
Odbieranie i analizowanie informacji
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Mind mapping
\end_layout

\begin_layout Subsection
Wprowadzenie do techniki Mind Mappingu
\end_layout

\begin_layout Subparagraph
Obrazowe metody utrwalania wiedzy i modelowania systemów były używane od
 wieków w nauczaniu, wizualnym myśleniu i rozwiązywaniu problemów przez
 inżynierów, nauczycieli, psychologów i innych.
 Jeden z pierwszych przykładów takich graficznych zapisów został stworzony
 przez Porfiriusza, greciego myśliciela żyjącego w III wieku n.e.
 Pierwszym krokiem standaryzacji tego rodzaju organizacji myśli były 
\emph on
sieci semantyczne
\emph default
.
 Są to sieci reprezentujące semantyczne relacje pomiędzy koncepcjami.
 Zostały one opracowane przez Richarda H.
 Richensa w celu zdefiniowania meta-języka do translacji maszynowej na języki
 naturalne [COGNI].
 Przykład takiej sieci semantycznej ilustruje Rys 3.1
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.1.jpg
	lyxscale 50
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
Rys 3.1 Przykład sieci semantycznej
\end_layout

\begin_layout Subparagraph
Technika 
\emph on
Mind Mappingu
\emph default
 została opracowna przez dwóch brytyjskich naukowców, Tony'ego i Barry'ego
 Buzana w latach 60-tych XX wieku.
 Służy do reprezentowania słów, idei, zadań i innych elementów połączonych
 i ułożonych dookoła centralnego słowa-klucza bądź idei.
 Mapy pamięci są wykorzystywane do wizualizacji oraz strukturyzacji.
 Są przydatne przy rozwiązywaniu problemów, podczas podejmowania decyzji
 oraz pisania.
 Poprzez reprezentowanie idei w graficzny, promieniowy i nieliniowy sposób,
 mapy pamięci są często wykorzystywane podczas 
\begin_inset Quotes eld
\end_inset

burzy mózgów
\begin_inset Quotes erd
\end_inset

 jako sposób reprezentacji planów i organizacji zadań.
 Metoda ta stała się bardzo popularna i jest wykorzystywana przez miliony
 ludzi na całym świecie.
 [BUZAN2]
\end_layout

\begin_layout Subsection
Nauka a ludzki mózg
\end_layout

\begin_layout Subparagraph
Mózg ludzki składa się dwóch półkul odpowiedzialnych za różne procesy myślowe.
 Lewa półkula zajmuje się analizą słowa, logiką, liczbami, hierarchią, linearnoś
cią i zbiorami.
 Natomiast prawa połkula odpowiada za rytm, świadomość przestrzeni, obraz
 całości, wyobraźnię, marzenia, postrzeganie kolorów i rozmiarów.
 W czasie uczenia się z wykorzystaniem notatek linearnych wykorzystuje się
 głównie lewą półkulę.
 Rysunek 3.2 przedstawia podział półkul mózgowych na funkcje [COGNI].
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.2.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 3.2 Funkcje półkul mózgowych
\end_layout

\begin_layout Paragraph
Najczęściej spotykanymi sposobami notowania są [BUZAN1]:
\end_layout

\begin_layout Enumerate
Notatki w formie narracyjnej - spisywanie treści komunikatu w formie ciągu
 zdań
\end_layout

\begin_layout Enumerate
Notatki w formie listy myśli w koleności pojawiania się
\end_layout

\begin_layout Enumerate
Notatki w formie hierarchicznej - uporządkowanie wiedzy w strukturę, oznaczoną
 literami lub liczbami
\end_layout

\begin_layout Subparagraph
Ten rodzaj notatek pobudza mózg za pomocą analizy: słów, liczb, kolejności,
 linii, zbiorów i logiki.
 Patrząc na rysunek 3.2 można zauważyć, że analizą tych elementów zajmuje
 się głównie lewa półkula.
 By się efektywniej uczyć, należy uaktywnić w jak największym stopniu mózg
 do działania.
 Elementami które również można użyć podczas tworzenia notatek są: rytm
 wizualny, schemat, kolor, obraz, wizualizacja, wymiar, zmysł przestrzeni
 i skojarzenia.
 Są to rzeczy, które również uczestniczą w procesie myślenia, zapamiętywania
 i przypominania, dlatego warto wykorzystać je również podczas tworzenia
 notatek.
 Jedną z metod pobudzenia wszystkich obszarów mózgu jest technika tworzenia
 map pamięci.
 Przykład takiej mapy ilustruje rysunek 2.3
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.3.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 3.3 Przykładowa mapa pamięci
\end_layout

\begin_layout Standard
Tony Buzan skonstruował 4 podstawowe zasady potrzebne przy tworzeniu mapy
 pamięci [BUZAN1]:
\end_layout

\begin_layout Itemize
Temat mapy symbolizuje centralny rysunek
\end_layout

\begin_layout Itemize
Główne zagadnienia w postaci gałęzi wybiegają promieniście z centralnego
 rysunku
\end_layout

\begin_layout Itemize
Gałęzie zawierają kluczowy rysunek lub słowo (wypisane dużymi literami nad
 odpowiednią linią).
 Zagadnienia poboczne lub mniej ważne reprezentowane są jako gałęzie podporządko
wane gałęziom wyższego rzędu
\end_layout

\begin_layout Itemize
Gałęzie tworzą sieć węzłów
\end_layout

\begin_layout Standard
Ważne jest również, by wzbogacać je o kolory, rysunki oraz własne skróty
 myślowe, gdyż dzięki temu pobudzana jest kreatywność i łatwiej sobie przypomnie
ć wiedzę zgromadzoną na mapie pamięci.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Przegląd aplikacji do tworzenia map pamięci
\end_layout

\begin_layout Subsection
Uwagi wstępne
\end_layout

\begin_layout Subparagraph
Na rynku komputerowym istnieje parę programów do tworzenia map pamięci.
 Najczęściej są one prostym edytorem graficznym grafiki wektorowej który
 pozwala na łączenie ze sobą informacji w sposób zgodny z zasadami tworzenia
 map pamięci.
 Podstawowe funkcje obejmują:
\end_layout

\begin_layout Itemize
kolorowanie węzłów
\end_layout

\begin_layout Itemize
dodawanie ikonek do węzłów
\end_layout

\begin_layout Itemize
tworzenie węzłów według struktury drzewa
\end_layout

\begin_layout Itemize
drukowanie i import do pliku graficznego
\end_layout

\begin_layout Subsection
Xmind
\end_layout

\begin_layout Subparagraph
Xmind jest programem Open Source stworzonym za pomocą języka Java oraz Eclipse
 Rich Client Platform i Eclipse Graphical Editing Framework.
 Użycie bibliotek Eclipse pozwoliło na stworzenie interfejsu który jest
 przystępny użytkownikom.
 Aplikacja jest rozwijana od 2007 roku, a od końca 2008 roku jest dostępna
 na licencji LGPL.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/xmind.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.1 Wygląd interfejsu użytkownika programu XMind
\end_layout

\begin_layout Subparagraph
Jego funkcjonalność pozwala na:
\end_layout

\begin_layout Itemize
tworzenie map o różnej strukturze (diagramy drzewa, Ishkawy , wykresy organizacy
jne czy arkusze kalkulacyjne) 
\end_layout

\begin_layout Itemize
tworzenie węzłów o dowolnym poziomie zagnieżdżenia 
\end_layout

\begin_layout Itemize
użycie zdefiniowanych stylów kolorowania węzłów mapy pamięci 
\end_layout

\begin_layout Itemize
dodawanie notatek w dowolnym miejscu struktury mapy 
\end_layout

\begin_layout Itemize
zagnieżdżanie map wewnątrz innych (w ramach jednego dokumentu)
\end_layout

\begin_layout Itemize
publikowanie map pamięci w na stronach internetowych
\end_layout

\begin_layout Subsection
FreeMind
\end_layout

\begin_layout Standard
FreeMind jest aplikacją typu open source wydaną na licencji GPL.
 Została stworzona za pomocą języka programowania Java i zestawu narzędzi
 Swing do tworzenia interfejsu użytkownika.
 Jest rozwijana od roku 2000.
 Przykładowy zrzut ekranu został przedstawiony na rys 4.2.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/freeMind.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.2 Wygląd interfejsu użytkownika programu FreeMind
\end_layout

\begin_layout Standard
Jej funkcjonalność pozwala na:
\end_layout

\begin_layout Itemize
zapisywanie dokumentu w wielu formatach, uwzględniając XML, HTML, OpenDocument
 czy PDF
\end_layout

\begin_layout Itemize
prezentacja na stronach internetowych w technologii Flash i Java
\end_layout

\begin_layout Itemize
wyszukiwanie wewnątrz mapy pamięci
\end_layout

\begin_layout Itemize
tworzenie hiperłącz w danych węzłach
\end_layout

\begin_layout Itemize
rozszerzenia do wielu systemów CMS (ang Content Management System)
\end_layout

\begin_layout Subsection
Buzan's iMindMap
\end_layout

\begin_layout Standard
Buzan's iMindMap jest komercyjnym oprogramowaniem stworzonym przez firmę
 ThinkBuzan Ltd.
 Jej funcjonalność wykracza poza zwykłe tworzenie map pamięci i umożliwia
 ponadto zarządzanie projektami i planowanie.
 Rysunek 4.3 prezentuje wygląd aplikacji.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/IMindMap.jpg
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.3 Przykładowa mapa pamięci
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Specyfikacja wymagań funkcjonalnych programu
\end_layout

\begin_layout Subsection
Uwagi wstępne
\end_layout

\begin_layout Standard
W celu przedstawienia wymagań funkcjonalnych została stworzona lista wszytkich
 głównych funkcji aplikacji i każda z nich opisana.
 Są to wymagania ogólne, definiujące szkic aplikacji.
\end_layout

\begin_layout Subsection
Tworzenie map pamięci
\end_layout

\begin_layout Standard
Tworzenie map pamięci powinno umożliwiać:
\end_layout

\begin_layout Itemize
Tworzenie węzłów
\end_layout

\begin_layout Itemize
Łączenie węzłów w sposób dowolny ze sobą
\end_layout

\begin_layout Itemize
Zmianę koloru i kształtu węzłów
\end_layout

\begin_layout Itemize
Automatyczne rozmieszczanie pozycji węzłów uwzględniając połączenia pomiędzy
 nimi
\end_layout

\begin_layout Subsection
Prezentacja map pamięci
\end_layout

\begin_layout Standard
Prezentacja mapy pamięci ma być płynne i animowane.
 Powinna być również możliwość drukowania mapy pamięci oraz zapisywanie
 jej w formie pliku graficznego.
 Powinna być możliwość przesuwania widoku mapy za pomocą myszki oraz zmianę
 powiększenia prezentacji.
\end_layout

\begin_layout Subsection
Interakcja z przeglądarką internetową
\end_layout

\begin_layout Standard
W ramach szybkiego tworzenia map pamięci, przeglądarka internetowa powinna
 umożliwić kopiowanie w wygodny sposób dowolnego tekstu ze strony internetowej
 do przeglądarki i szybkie tworzenie elementów bazowanych na tym tekście.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Specyfikacja wymagań pozafunkcjonalnych programu
\end_layout

\begin_layout Subsection
Uwagi wstępne
\end_layout

\begin_layout Standard
W tym rozdziale zostaną
\begin_inset space \space{}
\end_inset

omówione wymagania pozafunkcjonalne, spełniane przez stworzoną aplikację,
 w oparciu o standard ISO/IEC 9126-1:2001 [ISO].
 Standard ten jest używany do oceny jakości oprogramowania.
 Odniesiono się zatem do niego, opisując stosowne założenia spełniające
 przez aplikację.
\end_layout

\begin_layout Subsection
Wydajność
\end_layout

\begin_layout Enumerate
Wykorzystanie zasobów (ang.

\emph on
 resource utilisation
\emph default
) - rodzaj i liczba wykorzystanych zasobów, np.
 pamięć operacyjna
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja nie powinna wykorzystywać więcej niż
\begin_inset space \space{}
\end_inset

30 MB pamięci operacyjnej.
\end_layout

\end_deeper
\begin_layout Enumerate
Wydajność (ang.
 
\emph on
efficiency compliance
\emph default
) - szybkość odpowiedzi aplikacji na akcje użytkownika
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna natychmiastowo reagować na interakcję użytkownika
\end_layout

\end_deeper
\begin_layout Subsection
Użyteczność
\end_layout

\begin_layout Enumerate
Łatwość zrozumienia (ang.
 
\emph on
understability
\emph default
)- łatwość zrozumienia czym jest dany produkt i jak może być użyty.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna posiadać pełną
\begin_inset space \space{}
\end_inset

dokumentację funkcjonalności.
\end_layout

\end_deeper
\begin_layout Enumerate
Łatwość operowania (ang.
 
\emph on
operability
\emph default
) - zdefiniowana jako łatwość użytkowania i sterowania oprogramowaniem.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna posiadać interfejs użyteczny dla użytkownika.
\end_layout

\end_deeper
\begin_layout Enumerate
Atrakcyjność (ang.
 
\emph on
attractiveness
\emph default
) - wygląd produktu 
\end_layout

\begin_deeper
\begin_layout Itemize
Komunikacja z aplikacją
\begin_inset space \space{}
\end_inset

powinna odbywać się
\begin_inset space \space{}
\end_inset

za pomocą
\begin_inset space \space{}
\end_inset

interfejsu graficznie przystępnego dla użytkownika.
\end_layout

\end_deeper
\begin_layout Subsection
Przenośność
\end_layout

\begin_layout Enumerate
Łatwość adaptacji (ang.
 
\emph on
adaptability
\emph default
) - pracochłonność potrzebna do dostosowania aplikacji by działała na innych
 systemach operacyjnych
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja zostanie napisany w języku Python, w celu zapewnienia przenośności
 pomiędzy systemami operacyjnymi
\end_layout

\begin_layout Itemize
Aplikacja powinna umożliwiać uruchomienie na platformach systemowych Windows
 oraz Linux 
\end_layout

\end_deeper
\begin_layout Enumerate
Łatwość insatalacji (ang.
 
\emph on
installability
\emph default
) - nakład pracy potrzebny do zainstalowania i konfiguracji aplikacji
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja dostarcza dokumentację
\begin_inset space \space{}
\end_inset

zainstalowania zależności potrzebnych do instalacji na danej platformie
\end_layout

\begin_layout Itemize
Aplikacja jest zaprojektowani w sposób przenośny (ang.
 
\emph on
portable
\emph default
), nie wymaga zapisania jakichkolwiek informacji w rejestrze czy ustawieniach
 systemu operacyjnego
\end_layout

\end_deeper
\begin_layout Subsection
Niezawodność
\end_layout

\begin_layout Enumerate
Odporność na błędy (and.
 
\emph on
failure recoverability
\emph default
) - zdolność do działania nawet po wystąpieniu błędu w aplikacji
\end_layout

\begin_deeper
\begin_layout Itemize
Błąd w czasie uruchomienia nie może powodować awarii całej aplikacji
\end_layout

\begin_layout Itemize
Aplikacja nie powinna narażać system operacyjny na niestabilność działania
\end_layout

\end_deeper
\begin_layout Subsection
Serializacja
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wstępna konstrukcja programu
\end_layout

\begin_layout Subparagraph
Program powinien być skonstruowany w taki sposób, by oddzielić od siebie
 poszczególne elementy.
 Zapewni to łatwość rozszerzania aplikacji i naprawy błędów.
 Przewidziano następujące elementy aplikacji:
\end_layout

\begin_layout Itemize
Interfejs użytkownika
\end_layout

\begin_layout Itemize
Prezentacja map pamięci
\end_layout

\begin_layout Itemize
Manipulacja każdym elementem
\end_layout

\begin_layout Itemize
Interakcja z użytkownikiem
\end_layout

\begin_layout Itemize
Serializacja
\end_layout

\begin_layout Itemize
Interakcja z przeglądarką internetową
\end_layout

\begin_layout Subparagraph
Interfejs dodawania mapy pamięci powinien działać jak najwydajniej, z uwagi
 na możliwość uruchomienia go na różnych platformach o różnej mocy obliczeniowej.
 Większość produktów programistycznych jest dostępnych w formie binarnej,
 i mimo dużej możliwości dostosowywania ich działania, czasami istnieje
 potrzeba głębszej modyfikacji, co nie zawsze jest możliwowe.
 Dzięki społeczności OpenSource wiele rozwiązań posiada swoje kompilacje
 na różne platformy sprzętowe i systemowe, co w tym przypadku ma duże znaczenie.
 Przejawem tego podejścia jest użycie następujących technologii:
\end_layout

\begin_layout Itemize
Python - język programowania z otwartym kodem źródłowym
\end_layout

\begin_layout Itemize
QT - otwarty zbiór bibliotek programistycznych
\end_layout

\begin_layout Itemize
PyQT - nakładka biblioteki QT na język Python
\end_layout

\begin_layout Itemize
XUL, Javascript i XPCOM - zbór technologii wykorzystywany do tworzenia rozszerze
ń do produktów Mozilli
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wykorzystane technologie i narzędzia
\end_layout

\begin_layout Subsection
Wymagania technologiczne aplikacji
\end_layout

\begin_layout Subparagraph
Głównym założeniem aplikacji jest możliwość uruchomienia jej na wielu platformac
h, bez potrzeby dostosowywania jej do każdej z nich.
 Ma być obsługiwana za pomocą klawiatury, myszki i ekranu dotykowego.
 
\end_layout

\begin_layout Subparagraph
Program ma działać szybko na komputerach o słabej mocy obliczeniowej, nie
 zamując dużo miejsca w pamięci operacyjnej.
\end_layout

\begin_layout Subsection
Biblioteki i języki programowania
\end_layout

\begin_layout Subsubsection
Python
\end_layout

\begin_layout Subparagraph
Python jest interpretowanym, interaktywnym, zorientowanym obiektowo językiem
 programowania.
 Jego składnia jest bardzo charakterystyczna ze względu na umieszczanie
 wcięć w kodzie zamiast nawiasów, dzięki czemu kod staje się bardzo czytelny.
 Istnieją setki gotowych modułów do pythona która umożliwiają na użycie
 bibilotek napisanych w innych językach programowania.
 
\end_layout

\begin_layout Subsubsection
Qt
\end_layout

\begin_layout Subparagraph
QT jest zbiorem bibliotek stworzonych przez firmę Trolltech, następnie przejętą
 przez firmę Nokia.
 Obejmuje kilkaset klas odpowiedzialnych za projektowanie interfejsu użytkownika
, programowanie wielowątkowe, współdzielenie pamięci, komunikację z bazami
 danych, grafikę OpenGL, dostęp do multimediów, obsługę XML, komunikację
 międzyprocesową, sieciową, grafikę wektorową i innych.
 Programy które używają tych bibliotek można uruchomić na następujących
 platformach: Linux, Windows, Mac OS X, Embedded Linux, Windows CE, Symbian
 i Maemo.
 Są też dostępne porty na inne platformy, jak iPhone, Android, webOS, openSolari
s czy OS/2.
 Bibliotek Qt można używać za pomocą języka C++, jednak dzięki zastosowaniu
 MOC (ang.
 Meta Object Compiler) jest możliwość pisania swoich aplikacji w innych
 językach programowania, takich jak Java, C#, Lisp, Pascal, Python czy Ruby.
\end_layout

\begin_layout Subsubsection
PyQt
\end_layout

\begin_layout Subparagraph
PyQt jest nakładką stworzoną by używać bibliotek QT wraz z językiem programowani
a Python.
 Została stworzona poprzez narzędzie SIP, które automatycznie generuje moduły
 Pythona z plików nagłówkowych bibliotek C++.
 To narzędzie zostało stworzone na potrzeby stworzenia tej nakładki, przez
 firmę Riverbank Computing.
\end_layout

\begin_layout Subsubsection
Javascript, XUL i XPCOM
\end_layout

\begin_layout Subparagraph
Javascript jest interpretowanym, obiektowym językiem programowania wykorzystywan
ym głównie na stronach Internetowych.
 Stosuje się go głównie do zapewnienia interaktywności stron Internetowych
 po stronie klienta
\end_layout

\begin_layout Subparagraph
XUL (ang.
 XML-based User-interface Language) jest językiem XML przeznaczonym do definiown
ia interfejsów użytkownika.
 Jest używany głównie przez produkty fundacji Mozilli typu Firefox, Flock
 czy Thunderbird.
\end_layout

\begin_layout Subparagraph
XPCOM (ang.
 Cross Platform Component Object Model) jest przenośną platformą obiektów
 COM, podobną do Microsoft COM.
 Posiada dowiązań do wielu języków programowania.
 Interfejsy w XPCOM są definiowane jako dialekty IDL (ang.
 Interface Definition Language) zwane XPIDL.
 XPCOM dostarcza zestaw componentów i klas pozwalających na zarządzanie
 plikami i pamięcia, wątki, struktury danych i inne.
 
\end_layout

\begin_layout Subparagraph
Zestaw tych trzech technologii pozwala na tworzenie rozszerzeń do aplikacji
 Firefox i Thunderbird.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Architektura programu
\end_layout

\begin_layout Subsection
Zarządzanie mapami pamięci
\end_layout

\begin_layout Standard
Głównym systemem zarządzającym obiektami na mapie pamięci oraz ich wyświetlaniem
 jest 
\emph on
Graphics View Framework 
\emph default
który jest zawarty w bibliotekach QT.
 Zawiera on 3 podstawowe elementy:
\end_layout

\begin_layout Itemize
QGraphicsScene - scena w której przechowywane są obiekty wraz z ich położeniem
\end_layout

\begin_layout Itemize
QGraphicsView - widok danej sceny
\end_layout

\begin_layout Itemize
QGraphicsItem - obiekt sceny
\end_layout

\begin_layout Standard
Scena jest kontenerem na obiekty, zapewniając szybki dostęp do nich.
 Jej zaletą jest zarządzanie stanem obiektów, detekcją kolizji i propagacją
 zdarzeń.
 QGraphicsScene używa algorytmu 
\emph on
Binary Space Positioning 
\emph default
do efektywnego zarządzania widzialnością danych obiektów.
 System propagacji zdarzeń wysyła zdarzenia do obiektów do których się dane
 zdarzenie odnosi.
 Jeżeli scena otrzyma zdarzenie kliknięcia myszą w danym miejscu, przekazuje
 to zdarzenie do obiektu który znajduje się na danej pozycji.
\end_layout

\begin_layout Standard
Widok dostarcza kontrolkę która wizualizuje zawartość sceny.
 Możliwe jest podłączenie wielu widoków do jednej sceny by zapewnić wiele
 rzutni na dany zbiór obiektów.
 Widok otrzymuje bezpośrednio zdarzenia klawiatury i myszki i tłumaczy je
 na zdarzenia sceny przetwarzając koordynaty widoku na koordynaty sceny.
\end_layout

\begin_layout Standard
Obiekt sceny jest bazową klasą dla każdego graficznego elementu sceny.
 Dostępne są również predefiniowane klasy dziedziczące po QGraphicsItem,
 definiując style rysowania elipsy, tekstu czy prostokąta.
\end_layout

\begin_layout Standard
W aplikacji zostały wykorzystane wszystkie trzy klasy do stworzenia mechanizmu
 map pamięci.
 Z uwagi na zadowalającą funkcjonalność klasy QGraphicsScene nie było potrzeby
 jej rozszerzać, w przypadku pozostałych klas zaistniała potrzeba przeciążenia
 dużej części metod.
\end_layout

\begin_layout Subsection
System sygnałów i slotów
\end_layout

\begin_layout Standard
Biblioteka QT umożliwia na bardzo proste zarządzanie zdarzeniami na obiektach.
 Posiada ona system sygnałów i slotów, który implementuje wzorzec projektowy
 obserwatora (ang.
 
\emph on
Observer pattern
\emph default
).
 Obiekty mogą emitować sygnały (również z przekazywanymi wartościami) i
 inne obiekty mogą reagować na te sygnały podłączające je do slotów.
 Podejście takie jest bardzo elastyczne, gdyż do jednego slotu można podłączyć
 wiele sygnałów jak również sygnał może być obsługiwany przez wiele slotów.
 Każdy sygnał ma swoją nazwę po której jest identyfikowany i jest możliwe
 również przekazywanie wartości podczas emitowania sygnału.
 Niektóre obiekty zawierają predefiniowane sygnały i sloty, dzięki czemu
 można przekierowywać zdarzenia poszczególnych obiektów.
 Na przykład klasa QPushButton która implementuje przyciski na widgecie
 emituje sygnał 
\begin_inset Quotes eld
\end_inset

clicked()
\begin_inset Quotes erd
\end_inset

 w momencie kliknięcia na niego [PYQT].
 
\end_layout

\begin_layout Standard
System sygnałów i slotów jest wykorzystywany głównie w klasie 
\emph on
FormFromText
\emph default
 oraz 
\emph on
textEdit
\emph default
.
 Obiekt 
\emph on
pierwszej klasy
\emph default
 nasłuchuje sygnału o nazwie 
\begin_inset Quotes eld
\end_inset

addItemToList
\begin_inset Quotes erd
\end_inset

 który emitowany jest w momencie gdy zostaje zaznaczony tekst.
 Następnie tworzy w oknie dynamicznie dwa przyciski.
 Pierwszy zawiera tekst który został zaznaczony, drugi napis 
\begin_inset Quotes eld
\end_inset

X
\begin_inset Quotes erd
\end_inset

.
 Od razu do obu przycisków są podłączane sygnały kliknięcia, które są obsługiwan
e przez dwie metody w klasie FormFromText.
 Jeżeli użytkownik naciśnie pierwszy przycisk, zostaje emitowany sygnał
 
\begin_inset Quotes eld
\end_inset

addItem
\begin_inset Quotes erd
\end_inset

 który jest podłączony pośrednio do klasy 
\emph on
GraphicsView, 
\emph default
która otrzymuje informacje jaki tekst został wybrany i tworzy nowy element
 na scenie razem z tym tekstem.
 Jednak gdy użytkownik naciśnie drugi przycisk, oba przyciski zostają usunięte
 z okna.
\end_layout

\begin_layout Standard
Architektura obiekt - scena
\end_layout

\begin_layout Subsection
Opis klas
\end_layout

\begin_layout Subsubsection
Form
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/form.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa Form
\end_layout

\begin_layout Standard
Jest to główna klasa aplikacji.
 Dziedziczy po klasie QMainWindow.
 Zawiera główne okno oraz metody związane z serializacją, deserializacją
 oraz drukowaniem.
 Konstruktor w zależności od podanych argumentów tworzy nowy dokument, wczytuje
 istniejący lub uruchamia nowy dokument z oknem tworzenia dokumentu z tekstu.
\end_layout

\begin_layout Subsubsection
GraphicView
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/graphicsView.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa GraphicsView
\end_layout

\begin_layout Standard
Jest to klasa odpowiedzialna za wszelką interakcją z użytkownikiem, dodawaniem,
 usuwaniem, łączeniem i rozłączaniem elementów.
 Dziedziczy po QGraphicsView, które jest prezentacją sceny QGraphicScene
 zawierającej wszelkie elementy.
 Grupa metod 
\emph on
mousePressEvent
\emph default
, 
\emph on
mouseReleaseEvent
\emph default
 i 
\emph on
mouseMoveEvent
\emph default
 zarządza wszelkimi zdarzeniami związanymi z przemieszczaniem elementów,
 zmienianiem powiększenia, przesuwaniem widoku i tworzeniem nowych elementów.
\end_layout

\begin_layout Subsubsection
Node
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/node.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa Node
\end_layout

\begin_layout Subsubsection
Edge
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/edge.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa Edge
\end_layout

\begin_layout Subsubsection
FormFromText
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/fromfromtext.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa FormFromText
\end_layout

\begin_layout Subsubsection
editNode
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/editNode.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa editNode
\end_layout

\begin_layout Subsubsection
lineEdit
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/lineEdit.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa lineEdit
\end_layout

\begin_layout Subsubsection
textEdit
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/textEdit.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa textEdit
\end_layout

\begin_layout Subsubsection
editTextDialog
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/editTextDialog.png
	lyxscale 30
	scale 30
	groupId uml

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 8.1 Klasa editTextDialog
\end_layout

\begin_layout Subsection
Listing kodu
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Interfejs użytkownika
\end_layout

\begin_layout Subsection
Uwagi wstępne
\end_layout

\begin_layout Subparagraph
Z uwagi na lekką odmienność interfejsu użytkownika aplikacji od stardardowych
 programów, w poniższym rozdziale zostanie omówiona interakcja programu
 z użytkownikiem.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_mainWindow.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 9.1 Wygląd interfejsu użytkownika programu
\end_layout

\begin_layout Subparagraph
Aplikacja ma bardzo prosty interfejs z uwagi na dostarczenie użytkownikowi
 jak największej przestrzeni do oglądania mapy pamięci.
 Ma to na celu umożliwienie pełnego skupienia się przy tworzeniu mapy.
 Główną część okna zajmuje widok mapy pamięci, wraz z paskiem menu programu.
 Interakcja z programem odbywa się za pomocą klawiatury i myszki.
 Zaleca się korzystanie z myszy zewnętrznej lub touchpada skonfigurowanego
 do naciskania środkowego przycisku myszy i funkcji rolki.
\end_layout

\begin_layout Subsection
Poruszanie się w widoku mapy pamięci
\end_layout

\begin_layout Subparagraph
Przesuwanie widoku mapy pamięci odbywa się za pomocą naciśnięcia prawego
 lub środkowego przycisku i poruszania myszy.
 Zwiększanie lub zmniejszanie widoku wielkości mapy pamięci odbywa się za
 pomocą używania rolki na myszce.
 Należy zwrócić uwagę by nie był zaznaczony żaden element przy używaniu
 rolki.
\end_layout

\begin_layout Subsection
Dodawanie i edycja węzłów
\end_layout

\begin_layout Subparagraph
By dodać nowy węzeł do mapy pamięci, należy kliknąć dwukrotnie na pustym
 miejscu w widoku mapy pamięci.
 Stworzy to nowy element i otworzy okno edycji tekstu i stylu węzła.
 Widok okna edycji pokazuje rys 9.2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_nodeEdit.png

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 9.2 Wygląd okna edycji węzła
\end_layout

\begin_layout Subparagraph
Po zamknięciu okna edycji uaktualnia się wygląd węzła.
 Przywołać to okno można ponownie klikając dwukrotnie na obiekcie.
 By edytować wielkość węzła, należy zaznaczyć element i użyć rolki.
\end_layout

\begin_layout Subsection
Usuwanie węzłów
\end_layout

\begin_layout Subparagraph
Zaznaczając dowolne elementy można je usunąć naciskając przycisk DELETE
 lub wybierając z górnego menu Edit->Delete.
\end_layout

\begin_layout Subsection
Łączenie węzłów
\end_layout

\begin_layout Subparagraph
Łączenie węzłów odbywa się poprzez przeciągnięcie dowolnego elementu na
 inny.
\end_layout

\begin_layout Subsection
Rozłączanie węzłów
\end_layout

\begin_layout Subparagraph
Rozłączanie węzłów odbywa się w analogiczny sposób co łączenie, tylko należy
 przy tej operacji trzymać wciśnięty przycisk CTRL i najechać elementem
 na inny który chcemy rozłączyć.
\end_layout

\begin_layout Subsection
Ustawianie automatycznego pozycjonowania węzła
\end_layout

\begin_layout Subparagraph
Zaznaczając element i naciskając środkowy przycisk myszki można sprawić,
 by element się nie animował i nie przemieszczał.
 Umożliwia to dokładnie wypozycjonowanie elementów jeżeli automatyczne zawodzi.
\end_layout

\begin_layout Subsection
Dodawanie węzłów z tekstu
\end_layout

\begin_layout Subparagraph
Kolejnym elementem interfejsu jest tworze mapy pamięci z tekstu ze strony
 Internetowej.
 Jeżeli zainstalowany został dodatek do przeglądarki Firefox, można zaznaczyć
 w przeglądarce dowolny tekst, i z menu kontekstowego kliknąć pozycję 
\begin_inset Quotes eld
\end_inset

Add to Mindmap
\begin_inset Quotes erd
\end_inset

.
 Pojawi się wtedy okno tworzenia węzłów z tekstu.
 Interfejs tej funkcjonalności pokazuje Rys 9.3.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_nodeFromText.png
	lyxscale 80
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 9.3 Wygląd okna dodawania węzłów z tekstu
\end_layout

\begin_layout Subparagraph
By przekształcić dany fragment tekstu na węzeł w mapie pamięci, należy za
 pomocą myszki zaznaczyć dany tekst.
 Po zaznaczeniu pojawią się dwa przyciski.
 Jeden (z zaznaczonym tekstem) służy do dodania go do mapy pamięci, drugi
 do usunięcia zaznaczenia tekstu.
 Po kliknięciu na przycisk z tekstem znikają oba przyciski i pojawia się
 węzeł na mapie pamięci.
 Po zdecydowaniu co zrobić z wszystkimi zaznaczeniami tekstu zostanie przycisk
 zamknięcia okienka.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Uwagi końcowe
\end_layout

\begin_layout Subsection
Wymagania systemowe
\end_layout

\begin_layout Subparagraph
Aplikacja posiada następujące wymagania systemowe:
\end_layout

\begin_layout Itemize
Interpreter języka Python w wersji 2.6 - 2.7
\end_layout

\begin_layout Itemize
Biblioteki QT w wersji 4.7 lub nowszej
\end_layout

\begin_layout Itemize
Nakładki PyQt w wersji 4.7 lub nowszej
\end_layout

\begin_layout Itemize
Przeglądarki internetowej Firefox w wersji 3.5 - 4.0b10
\end_layout

\begin_layout Subsection
Uruchomienie programu
\end_layout

\begin_layout Subsubsection
GNU/Linux
\end_layout

\begin_layout Subparagraph
By uruchomić program na systemach opartych z grupy Linux, należy zainstalować
 interpreter python, biblioteki QT oraz PyQt.
\end_layout

\begin_layout Standard
W systemach opartych na dystrybucji Debian (np.
 Ubuntu, Mint) wystarczy wydać polecenie z terminalu z dostępem adminstracyjnym:
\end_layout

\begin_layout Standard

\emph on
sudo apt-get install python python-qt4 libqt4-core libqt4-gui
\end_layout

\begin_layout Standard
Następnie uruchamiamy program plikiem 
\emph on
runner.sh.
\end_layout

\begin_layout Subsubsection
Microsoft Windows
\end_layout

\begin_layout Subparagraph
Do uruchomienia aplikacji pod systemami operacyjnymi z rodziny Microsoft
 Windows wystarczy odpakować archiwum 
\emph on
mindmapping-win32.zip
\emph default
 na dysku lokalnym i uruchomić plik wykonywalny 
\emph on
mindmapping.exe
\emph default
.
 
\end_layout

\begin_layout Subsubsection
Instalacja rozszerzenia do przeglądarki Firefox
\end_layout

\begin_layout Subparagraph
Aplikacja posiada dwa osobne rozszerzenia, w zależności od systemu operacyjnego
 na którym zostaje uruchomiona.
 By zainstalować rozszerzenie, należy uruchomić przeglądarkę Firefox i wpisać
 w pasku adresu ścieżkę do pliku z roszerzeniem.
 
\end_layout

\begin_layout Subparagraph
W systemie operacyjnym Linux, gdy aplikację mamy w folderze 
\emph on
/home/user/mindmapping
\emph default
, wpisujemy:
\end_layout

\begin_layout Standard

\emph on
file:///home/user/mindmapping/mindmapping.xpi
\end_layout

\begin_layout Subparagraph
Następnie po zainstalowaniu rozszerzenia i uruchomieniu ponownym przeglądarki
 musimy skonfigurować ścieżkę z której będzie uruchamiania aplikacja.
 W tym celu uruchamiamy Narzędzia->Dodatki, i w preferencjach rozszerzenia
 podajemy bezwzględną ścieżkę do pliku wykonywalnego.
 W systemie Linux musimy podać plik 
\emph on
main.py, 
\emph default
natomiast w systemie Windows mindmapping.exe.
\end_layout

\begin_layout Subsection
Uruchamiania aplikacji z argumentami
\end_layout

\begin_layout Standard
Aplikacja umożliwia uruchomienie w trzech trybach.
\end_layout

\begin_layout Subsubsection
Tryb nowego dokumentu
\end_layout

\begin_layout Standard
Należy uruchomić aplikację bez argumentów
\end_layout

\begin_layout Subsubsection
Tryb tworzenia mapy pamięci z tekstu
\end_layout

\begin_layout Standard
Należy dodać dwa argumenty: 
\emph on
--text 
\begin_inset Quotes eld
\end_inset

Tekst z którego chcemy stworzyć mapę pamięci
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Tryb Wczytania pliku przy uruchomieniu
\end_layout

\begin_layout Standard
Należy dodać dwa argumenty: 
\emph on
--file /ścieżka/do/pliku.mindqt
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Bibliografia
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[BUZAN1] Buzan Tony, 
\emph on
Mapy twoich myśli
\emph default
, Ravi, Łódź 2003
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[PSYCHO] Nęcki Edward, Orzechowski Jarosław, Szymura Błażej, 
\emph on
Psychologia poznawcza
\emph default
, PWN, Warszawa 2006
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[COGNI] Stilling Neil, Weisler Steven, Chase Christopher, 
\emph on
Cognitive Science an introduction
\emph default
, MIT Press, London 2005
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[PYQT] Summerfield Mar, Rapid GUI programming with Python and QT, Prentice
 Hall, New York 2008
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[ISO] ISO/IEC 9126-1, Software engineering — Product quality — Part 1: Quality
 Model, June 2001
\end_layout

\end_body
\end_document
