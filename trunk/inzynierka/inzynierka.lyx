#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
%\usepackage{fontspec}
%\usepackage{xunicode}
%\usepackage{xltxtra}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language polish
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Aplikacja wspomagająca szybkie uczenie się oraz zapamiętywanie informacji w oparciu o technikę Mind Mappingu"
\pdf_author "Wojciech Jurkowlaniec"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 3
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Wyższa Szkoła Komunikacji i Zarządzania 
\begin_inset Newline newline
\end_inset

w Poznaniu
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Wojciech Jurkowlaniec
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Aplikacja wspomagająca proces uczenia się oraz zapamiętywanie informacji
 w oparciu 
\begin_inset Newline newline
\end_inset

o technikę Mind Mapping
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Praca dyplomowa inżynierska
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align right
Promotor: dr inż.
 Ewa Idzikowska
\end_layout

\begin_layout Standard
\align right
Instytut Informatyki
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align left
Instytut Informatyki
\end_layout

\begin_layout Standard
\align left
kierunek: Informatyka
\end_layout

\begin_layout Standard
\align left
specjalność: Technologie i zastosowania internetu
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
Poznań 2011
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Spis rysunków
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.1 Przykład sieci semantycznej
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.2 Funkcje półkul mózgowych
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
3.3 Przykładowa mapa pamięci
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.1 Wygląd interfejsu użytkownika programu XMind
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.2 Wygląd interfejsu użytkownika programu FreeMind
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
4.3 Wygląd interfejsu użytkownika programu iMindMap
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.1 Schemat UML elementów sceny
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
9.2 Schemat UML interfejsu użytkownika
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
10.1 Wygląd interfejsu użytkownika programu
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
10.2 Wygląd okna edycji węzła
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
10.3 Wygląd okna dodawania węzłów z tekstu
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
11.1 Wygląd okna przeglądarki internetowej
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
11.2 Wygląd interfejsu programu po dodaniu tekstu
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
11.3 Wygląd interfejsu programu po dodaniu paru węzłów
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
11.4 Drukowanie mapy pamięci
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wstęp
\end_layout

\begin_layout Subparagraph

\series medium
Żyjemy w czasach, gdzie komputery stały się łatwo dostępnym i używanym na
 co dzień narzędziem pracy czy rozrywki.
 Wykorzystuje się je do rozrywki, wzajemnej komunikacji, pogłębiania zainteresow
ań, a także do nauki.
 Internet stał się nieograniczonym źródłem informacji, w którym niekiedy
 trudno się odnaleźć.
 Spowodane jest to ogromną ilością dostępnych danych, przez co ich przyswajanie,
 czyli nauka staje się problematyczna.
\end_layout

\begin_layout Subparagraph

\series medium
Najpopularniejszą metodą uczenia się jest notowanie mówionego słowa, a następnie
 powtarzanie przez wielokrotne czytanie.
 Jednakże nie jest to technika efektywna dla wszystkich.
 Dlatego alternatywą może być wykorzystanie 
\emph on
Mind Mappingu
\emph default
, który pozwala na zapamiętanie większej ilości informacji w krótszym czasie.
 Sprawia, że tworzenie notatek jest mniej uciążliwe, a system powtórek pozwala
 na zapamiętanie informacji o dowolnej złożoności długofalowo.
\end_layout

\begin_layout Subparagraph

\series medium
Celem niniejszej pracy jest opracowanie aplikacji umożliwiającej wspomaganie
 procesu uczenia się, przy wykorzystaniu metod efektywnej nauki.
 Program będzie oparty o tworzenie map pamięci oraz funkcjonalność szybkiego
 tworzenia ww.
 map przy pomocy przeglądarki internetowej.
 Zostanie również przedstawiony interfejsu użytkownika programu oraz objaśnienie
 działania tej techniki.
\end_layout

\begin_layout Subparagraph

\series medium
Praca została podzielona na dwie części - teoretyczną i praktyczną.
 Część teoretyczną obejmują rozdziały 2-4, gdzie zostaje objaśniona technika
 Mind Mappingu, omówienie procesów poznawczych towarzyszących nauce oraz
 analizą istniejących aplikacji wspomagających tworzenie map pamięci.
\end_layout

\begin_layout Subparagraph

\series medium
Część praktyczną obejmują rozdziały 5-12, gdzie zostaje opisana koncepcja
 programu do tworzenia map pamięci, specyfikacja wymagań funkcjonalnych
 i niefunkcjonalnych, zostaną opisane wykorzystane technologie i narzędzia
 a następnie architektura programu i opis interfejsu użytkownika.
 Przedostatni rozdział traktuje o instalacji programu i różnych trybach
 pracy.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Procesy poznawcze towarzyszące nauce
\end_layout

\begin_layout Subparagraph

\series medium
By dobrze zrozumieć pojęcia związane z mapami pamięci oraz efektywnym uczeniem
 się i zapamiętywaniem potrzebne jest parę słów wstępu na temat procesów
 poznawczych.
 Ten rozdział jest podzielony na cztery podrozdziały które opisują poszczególny
 fazy związane z uczeniem się.
\end_layout

\begin_layout Subsection
Skupianie uwagi
\end_layout

\begin_layout Subparagraph

\series medium
Skupianie uwagi jest pierwszym elementem towarzyszącym uczeniu się.
 Jest bardzo ważny, gdyż bez koncentracji nie można przyswajać informacji.
 By dobrze zrozumieć ten proces, należy przytoczyć dwie definicje.
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Uwaga
\emph default
 to system odpowiedzialny za selekcję informacji i zapobieganie negatywnym
 skutkom przeładownia systemu poznawczego przez nadmiar danych [PSYCHO].
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Świadomość
\emph default
 to zdawanie sobie przez podmiot sprawy z treści własnych procesów psychicznych
 [PSYCHO].
\end_layout

\begin_layout Subparagraph

\series medium
Głównym elementem procesu skupiania uwagi jest 
\emph on
przeszukiwanie pola percepcyjnego
\emph default
.
 Mózg ludzki dokonuje tej czynności automatycznie.
 Przykładowo jak osoba stoi na ulicy w tłumie i szuka swojego znajomego,
 który ma na sobie czerwoną kurtkę, każde pojawienie się czerwonego koloru
 w zasięgu pola widzenia sprawia że osoba reaguje ze szczególną uwagą na
 te wystąpienia.
 Najłatwiej rozpoznaje się obiekty które posiadają cechy priorytetowe, różnią
 się od otoczenia kolorem, kształtem czy rozmiarem.
\end_layout

\begin_layout Subparagraph

\series medium
Kolejnym ważnym elementem jest 
\emph on
podzielnośc uwagi
\emph default
, które ozacza dzielenie pewnej ograniczonej puli 
\begin_inset Quotes eld
\end_inset

mocy obliczeniowej
\begin_inset Quotes erd
\end_inset

 na więcej niż jedno zadanie.
 Jednak robienie paru rzeczy na raz musi spowodować zakłócenie przynajmniej
 jednej z nich, dlatego ważne jest by tych czynności nie było zbyt wiele.
\end_layout

\begin_layout Subparagraph

\series medium
Również warto zwrócić uwagę na 
\emph on
przedłużoną koncentrację
\emph default
 (ang.
 sustained attention).
 Polega na zdolności utrzymania uwagi selektywnej przez dłuższy czas na
 tym samym aspekcie otoczenia.
 
\end_layout

\begin_layout Subsection
Odbieranie i analizowanie informacji
\end_layout

\begin_layout Subparagraph

\series medium
Na procesy odbierania i analizowania informacji składa się percepcja.
 Jest to zbiór procesów aktywnej interpretacji danych otoczenia.
 Dzięki wskazówkom kontekstowym, nastawieniu i wcześniej zdobytą wiedzą
 możliwe jest rozpoznanie obiektów.
 Do jej zadań należy dostarczanie informacji z całego ciała, uwzględniając
 narządy wewnętrzne, zmysły i aktualne położenie kończyn.
 W wyniku tych procesów pojawiają się spostrzeżenia, zwane 
\emph on
perceptami 
\emph default
[PSYCHO]
\emph on
.
\end_layout

\begin_layout Subparagraph

\series medium
Ważną rzeczą przy uczeniu się jest rozpoznawanie wzorców (ang.
 
\emph on
pattern recognition
\emph default
).
 Jest to bardzo ważna umiejętność, gdyż dzięki niej można na przykład rozpoznawa
ć pismo ręczne.
 Każdy wzorzec jest podświadomie kategoryzowany, i trwa on zależnie od ilości
 kategorii który ten proces musi sprawdzić [COGNI].
 Warto zauważyć, że im struktura identyfikowanych informacji jest bardziej
 ujednolicona, tym szybciej następuje ten proces.
 
\end_layout

\begin_layout Subsection
Zapamiętywanie informacji
\end_layout

\begin_layout Subparagraph

\series medium
Pamięć jest zdolnością do przechowywania informacji i późniejszego jej wykorzyst
ania.
 Składa się na niego zespół procesów poznawczych.
 Mimo badań nad pamięcią trwających już od wieków, nie udało się jednoznacznie
 stwierdzić w jaki sposób informacje są zapisywane.
 Jednak najbardziej przemawiającym modelem pamięci opartym na kryterium
 czasu przechowywania informacji jest podział na trzy systemy [COGNI]:
\end_layout

\begin_layout Itemize
magazyn sensoryczny (ang.
 
\emph on
sensory storage
\emph default
)
\end_layout

\begin_layout Itemize
magazyn krótkotrwały (ang.
 
\emph on
short term storage
\emph default
)
\end_layout

\begin_layout Itemize
magazyn długotrwały (ang.
 
\emph on
long term storage
\emph default
)
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Magazyn sensoryczny
\emph default
 jest specyficzny dla powiązanego z nim zmysłu.
 Podstawową funkcją każdego z nich jest przetrzymanie bodźca przez krótki
 czas (maksymalnie kilkaset milisekund).
 Przykładowo gdy zgasi się światło, osoba jeszcze przez chwilę 
\begin_inset Quotes eld
\end_inset

widzi
\begin_inset Quotes erd
\end_inset

 obraz pomieszczenia w którym się znajduje.
 Zbiór wszystkich informacji sensorycznych jest przekazywany do systemu
 poznawczego.
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Magazyn pamięci krótkotrwałej
\emph default
 działa w inny sposób niż sensoryczny, gdyż zbiera informacje które zostały
 już przetworzone przez system poznawczy, jak również przywołane z pamięci
 długotrwałej czy efekt bieżącego przetwarzania informacji.
 Podstawową funkcją tego rodzaju pamięci jest przechowywanie informacji
 w czasie niezbędnym do jej przetworzenia zgodnie z celem, jaki aktualnie
 realizujemy.
 Czas ten wacha się od kilkunastu do kilkudziesięciu sekund.
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Magazyn pamięci długotrwałej
\emph default
 z kolei charakteryzuje się najdłuższym czasem przechowywania informacji,
 mierzonym w perspektywie lat.
 Jednak informacja trafiająca do pamięci długotrwałej nie pozostaje tam
 na zawsze.
 Przykładem jest nauka języków obcych.
 W momencie gdy przez długi czas nie używamy danego języka, wiedza na jego
 temat zanika.
\end_layout

\begin_layout Subsection
Podsumowanie
\end_layout

\begin_layout Subparagraph

\series medium
Patrząc powyższy rozdział można zwrócić uwagę, że przed zapisaniem informacji
 
\begin_inset Quotes eld
\end_inset

na stałe
\begin_inset Quotes erd
\end_inset

 potrzebne jest dużo procesów nim trafi ona do magazynu pamięci długotrwałej.
 Na początku osoba ucząca się musi skupić uwagę na przedmiocie badań, by
 zacząć go analizować.
 Ważne w tym momencie jest, by uwaga nie była rozpraszana, przedmiot był
 zróżnicowany i w zasięgu wzroku nie było elementów przeszkadzających uczeniu
 się.
\end_layout

\begin_layout Subparagraph

\series medium
Śledząc dalsze kroki w celu zapamiętania informacji, po pomyślnym skupieniu
 się na obiekcie który zawiera informacje, umysł musi: rozpoznać jakiego
 typu jest to przedmiot, przeanalizowanie jak ważna jest jej zawartość i
 utrwalić w pamięci długotrwałej.
 Patrząc na mapę pamięci, wszystkie te zadania mamy ułatwione.
 Zawiera ona ujednoliconą strukturę jak i bogatą formę przekazu, zmuszającą
 na aktywowanie obu półkul mózgowych i szybkiego przypomnienia sobie przelanych
 tam wcześniej informacji.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Mind mapping
\end_layout

\begin_layout Subparagraph

\series medium
Obrazowe metody utrwalania wiedzy i modelowania systemów były używane od
 wieków w nauczaniu, wizualnym myśleniu i rozwiązywaniu problemów przez
 inżynierów, nauczycieli, psychologów i innych.
 Jeden z pierwszych przykładów takich graficznych zapisów został stworzony
 przez Porfiriusza, greckiego myśliciela żyjącego w III wieku n.e.
 Pierwszym krokiem standaryzacji tego rodzaju organizacji myśli były 
\emph on
sieci semantyczne
\emph default
.
 Są to sieci reprezentujące semantyczne relacje pomiędzy koncepcjami.
 Zostały one opracowane przez Richarda H.
 Richensa w celu zdefiniowania meta-języka do translacji maszynowej na języki
 naturalne [COGNI].
 Przykład takiej sieci semantycznej ilustruje rysunek 3.1
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.1.jpg
	lyxscale 50
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
Rys 3.1 Przykład sieci semantycznej
\end_layout

\begin_layout Subparagraph

\series medium
Technika 
\emph on
Mind Mappingu
\emph default
 została opracowna przez dwóch brytyjskich naukowców, Tony'ego i Barry'ego
 Buzana w latach 60-tych XX wieku.
 Służy do reprezentowania słów, idei, zadań i innych elementów połączonych
 i ułożonych dookoła centralnego słowa-klucza bądź idei.
 Mapy pamięci są wykorzystywane do wizualizacji oraz strukturyzacji.
 Są przydatne przy rozwiązywaniu problemów, podczas podejmowania decyzji
 oraz pisania.
 Poprzez reprezentowanie idei w graficzny, promieniowy i nieliniowy sposób,
 mapy pamięci są często wykorzystywane podczas 
\begin_inset Quotes eld
\end_inset

burzy mózgów
\begin_inset Quotes erd
\end_inset

 jako sposób reprezentacji planów i organizacji zadań.
 Metoda ta stała się bardzo popularna i jest wykorzystywana przez miliony
 ludzi na całym świecie [BUZAN2].
 
\end_layout

\begin_layout Subsection
Nauka a ludzki mózg
\end_layout

\begin_layout Subparagraph

\series medium
Mózg ludzki składa się dwóch półkul odpowiedzialnych za różne procesy myślowe.
 Lewa półkula zajmuje się analizą słowa, logiką, liczbami, hierarchią, linearnoś
cią i zbiorami.
 Natomiast prawa półkula odpowiada za rytm, świadomość przestrzeni, obraz
 całości, wyobraźnię, marzenia, postrzeganie kolorów i rozmiarów.
 W czasie uczenia się z wykorzystaniem notatek linearnych wykorzystuje się
 głównie lewą półkulę.
 Rysunek 3.2 przedstawia podział półkul mózgowych na funkcje [COGNI].
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.2.png
	lyxscale 30
	width 60text%
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 3.2 Funkcje półkul mózgowych
\end_layout

\begin_layout Paragraph

\series medium
Najczęściej spotykanymi sposobami notowania są [BUZAN]:
\end_layout

\begin_layout Enumerate
Notatki w formie narracyjnej - spisywanie treści komunikatu w formie ciągu
 zdań
\end_layout

\begin_layout Enumerate
Notatki w formie listy myśli w kolejności pojawiania się
\end_layout

\begin_layout Enumerate
Notatki w formie hierarchicznej - uporządkowanie wiedzy w strukturę, oznaczoną
 literami lub liczbami
\end_layout

\begin_layout Subparagraph

\series medium
Ten rodzaj notatek pobudza mózg za pomocą analizy: słów, liczb, kolejności,
 linii, zbiorów i logiki.
 Patrząc na rysunek 3.2 można zauważyć, że analizą tych elementów zajmuje
 się głównie lewa półkula.
 By się efektywniej uczyć, należy uaktywnić w jak największym stopniu mózg
 do działania.
 Elementami które również można użyć podczas tworzenia notatek są: rytm
 wizualny, schemat, kolor, obraz, wizualizacja, wymiar, zmysł przestrzeni
 i skojarzenia.
 Są to rzeczy, które również uczestniczą w procesie myślenia, zapamiętywania
 i przypominania, dlatego warto wykorzystać je również podczas tworzenia
 notatek.
 Jedną z metod pobudzenia wszystkich obszarów mózgu jest technika tworzenia
 map pamięci.
 Przykład takiej mapy ilustruje rysunek 3.3
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/3.3.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 3.3 Przykładowa mapa pamięci
\end_layout

\begin_layout Subsection
Zasady tworzenia map pamięci
\end_layout

\begin_layout Standard
Tony Buzan skonstruował 4 podstawowe zasady potrzebne przy tworzeniu mapy
 pamięci [BUZAN]:
\end_layout

\begin_layout Itemize
Temat mapy symbolizuje centralny rysunek
\end_layout

\begin_layout Itemize
Główne zagadnienia w postaci gałęzi wybiegają promieniście z centralnego
 rysunku
\end_layout

\begin_layout Itemize
Gałęzie zawierają kluczowy rysunek lub słowo (wypisane dużymi literami nad
 
\begin_inset Newline newline
\end_inset

odpowiednią linią).
 Zagadnienia poboczne lub mniej ważne reprezentowane są jako gałęzie podporządko
wane gałęziom wyższego rzędu
\end_layout

\begin_layout Itemize
Gałęzie tworzą sieć węzłów
\end_layout

\begin_layout Standard
Ważne jest również, by wzbogacać je o kolory, rysunki oraz własne skróty
 myślowe, gdyż dzięki temu pobudzana jest kreatywność i łatwiej sobie przypomnie
ć wiedzę zgromadzoną na mapie pamięci.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Przegląd aplikacji do tworzenia map pamięci
\end_layout

\begin_layout Subparagraph

\series medium
Na rynku komputerowym istnieje parę programów do tworzenia map pamięci.
 Najczęściej są one prostym edytorem graficznym grafiki wektorowej który
 pozwala na łączenie ze sobą informacji w sposób zgodny z zasadami tworzenia
 map pamięci.
 Podstawowe funkcje obejmują:
\end_layout

\begin_layout Itemize
tworzenie węzłów według struktury drzewa
\end_layout

\begin_layout Itemize
kolorowanie węzłów
\end_layout

\begin_layout Itemize
dodawanie ikonek do węzłów
\end_layout

\begin_layout Itemize
drukowanie i import do pliku graficznego
\end_layout

\begin_layout Subsection
Xmind
\end_layout

\begin_layout Subparagraph

\series medium
Xmind jest programem Open Source stworzonym za pomocą języka Java oraz Eclipse
 Rich Client Platform i Eclipse Graphical Editing Framework.
 Użycie tych bibliotek pozwoliło na stworzenie interfejsu który jest przystępny
 użytkownikom.
 Aplikacja jest rozwijana od 2007 roku, a od końca 2008 roku jest dostępna
 na licencji LGPL.
 Przykładowy zrzut ekranu został przedstawiony na rys 4.1.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/xmind.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.1 Wygląd interfejsu użytkownika programu XMind
\end_layout

\begin_layout Subparagraph

\series medium
Jego funkcjonalność pozwala na:
\end_layout

\begin_layout Itemize
tworzenie map o różnej strukturze (diagramy drzewa, Ishkawy , wykresy organizacy
jne czy arkusze kalkulacyjne) 
\end_layout

\begin_layout Itemize
tworzenie węzłów o dowolnym poziomie zagnieżdżenia 
\end_layout

\begin_layout Itemize
użycie zdefiniowanych stylów kolorowania węzłów mapy pamięci 
\end_layout

\begin_layout Itemize
dodawanie notatek w dowolnym miejscu struktury mapy 
\end_layout

\begin_layout Itemize
zagnieżdżanie map wewnątrz innych (w ramach jednego dokumentu)
\end_layout

\begin_layout Itemize
publikowanie map pamięci w na stronach internetowych
\end_layout

\begin_layout Subsection
FreeMind
\end_layout

\begin_layout Subparagraph

\series medium
FreeMind jest aplikacją typu open source wydaną na licencji GPL.
 Została stworzona za pomocą języka programowania Java i zestawu narzędzi
 Swing do tworzenia interfejsu użytkownika.
 Jest rozwijana od roku 2000.
 Przykładowy zrzut ekranu został przedstawiony na rys 4.2.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/freeMind.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.2 Wygląd interfejsu użytkownika programu FreeMind
\end_layout

\begin_layout Subparagraph
Jej funkcjonalność pozwala na:
\end_layout

\begin_layout Itemize
zapisywanie dokumentu w wielu formatach, uwzględniając XML, HTML, OpenDocument
 czy PDF
\end_layout

\begin_layout Itemize
prezentacja na stronach internetowych w technologii Flash i Java
\end_layout

\begin_layout Itemize
wyszukiwanie wewnątrz mapy pamięci
\end_layout

\begin_layout Itemize
tworzenie hiperłącz w danych węzłach
\end_layout

\begin_layout Itemize
rozszerzenia do wielu systemów CMS (ang Content Management System)
\end_layout

\begin_layout Subsection
Buzan's iMindMap
\end_layout

\begin_layout Subparagraph

\series medium
Buzan's iMindMap jest komercyjnym oprogramowaniem stworzonym przez firmę
 ThinkBuzan Ltd.
 Jej funcjonalność wykracza poza zwykłe tworzenie map pamięci i umożliwia
 ponadto zarządzanie projektami i planowanie.
 Wyróżnia go wygodny interfejs użytkownika i bogate graficznie mapy pamięci.
 Rysunek 4.3 prezentuje wygląd aplikacji.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/IMindMap.jpg
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 4.3 Wygląd interfejsu użytkownika programu iMindMap
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Specyfikacja wymagań funkcjonalnych programu
\end_layout

\begin_layout Subparagraph

\series medium
W celu przedstawienia wymagań funkcjonalnych została stworzona lista wszytkich
 głównych funkcji aplikacji i każda z nich opisana.
 Są to wymagania ogólne, definiujące szkic aplikacji.
\end_layout

\begin_layout Subsection
Tworzenie map pamięci
\end_layout

\begin_layout Paragraph

\series medium
Tworzenie map pamięci powinno umożliwiać:
\end_layout

\begin_layout Itemize
Tworzenie węzłów
\end_layout

\begin_layout Itemize
Łączenie węzłów w sposób dowolny ze sobą
\end_layout

\begin_layout Itemize
Zmianę koloru i kształtu węzłów
\end_layout

\begin_layout Itemize
Automatyczne rozmieszczanie pozycji węzłów uwzględniając połączenia pomiędzy
 nimi
\end_layout

\begin_layout Subsection
Prezentacja map pamięci
\end_layout

\begin_layout Subparagraph

\series medium
Prezentacja mapy pamięci ma być płynne i animowane.
 Powinna być również możliwość drukowania mapy pamięci oraz zapisywanie
 jej w formie pliku graficznego.
 Powinna być możliwość przesuwania widoku mapy za pomocą myszki oraz zmianę
 powiększenia prezentacji.
\end_layout

\begin_layout Subsection
Serializacja
\end_layout

\begin_layout Subparagraph

\series medium
Zapisywanie i odczytywanie danej mapy pamięci powinno być przeźroczyste
 dla 
\begin_inset space ~
\end_inset

użytkownika.
 Powinno dokładnie odzwierciedlać stan danej mapy pamięci.
\end_layout

\begin_layout Subsection
Interakcja z przeglądarką internetową
\end_layout

\begin_layout Subparagraph

\series medium
W ramach szybkiego tworzenia map pamięci, przeglądarka internetowa powinna
 umożliwić kopiowanie w wygodny sposób dowolnego tekstu ze strony internetowej
 do przeglądarki i szybkie tworzenie elementów bazowanych na tym tekście.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Specyfikacja wymagań pozafunkcjonalnych programu
\end_layout

\begin_layout Subparagraph

\series medium
W tym rozdziale zostaną
\begin_inset space \space{}
\end_inset

omówione wymagania pozafunkcjonalne, spełniane przez stworzoną aplikację,
 w oparciu o standard ISO/IEC 9126-1:2001 [ISO].
 Standard ten jest używany do oceny jakości oprogramowania.
 Odniesiono się zatem do niego, opisując stosowne założenia spełniające
 przez aplikację.
\end_layout

\begin_layout Subsection
Wydajność
\end_layout

\begin_layout Enumerate
Wykorzystanie zasobów (ang.

\emph on
 resource utilisation
\emph default
) - rodzaj i liczba wykorzystanych zasobów, np.
 pamięć operacyjna
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja nie powinna wykorzystywać więcej niż
\begin_inset space \space{}
\end_inset

30 MB pamięci operacyjnej.
\end_layout

\end_deeper
\begin_layout Enumerate
Wydajność (ang.
 
\emph on
efficiency compliance
\emph default
) - szybkość odpowiedzi aplikacji na akcje użytkownika
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna natychmiastowo reagować na interakcję użytkownika
\end_layout

\end_deeper
\begin_layout Subsection
Użyteczność
\end_layout

\begin_layout Enumerate
Łatwość zrozumienia (ang.
 
\emph on
understability
\emph default
)- łatwość zrozumienia czym jest dany produkt i jak może być użyty.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna posiadać pełną
\begin_inset space \space{}
\end_inset

dokumentację funkcjonalności.
\end_layout

\end_deeper
\begin_layout Enumerate
Łatwość operowania (ang.
 
\emph on
operability
\emph default
) - zdefiniowana jako łatwość użytkowania i sterowania oprogramowaniem.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja powinna posiadać interfejs użyteczny dla użytkownika.
\end_layout

\end_deeper
\begin_layout Enumerate
Atrakcyjność (ang.
 
\emph on
attractiveness
\emph default
) - wygląd produktu 
\end_layout

\begin_deeper
\begin_layout Itemize
Komunikacja z aplikacją
\begin_inset space \space{}
\end_inset

powinna odbywać się
\begin_inset space \space{}
\end_inset

za pomocą
\begin_inset space \space{}
\end_inset

interfejsu graficznie przystępnego dla użytkownika.
\end_layout

\end_deeper
\begin_layout Subsection
Przenośność
\end_layout

\begin_layout Enumerate
Łatwość adaptacji (ang.
 
\emph on
adaptability
\emph default
) - pracochłonność potrzebna do dostosowania aplikacji by działała na innych
 systemach operacyjnych
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja zostanie napisany w języku Python, w celu zapewnienia przenośności
 pomiędzy systemami operacyjnymi
\end_layout

\begin_layout Itemize
Aplikacja powinna umożliwiać uruchomienie na platformach systemowych Windows
 oraz Linux 
\end_layout

\end_deeper
\begin_layout Enumerate
Łatwość insatalacji (ang.
 
\emph on
installability
\emph default
) - nakład pracy potrzebny do zainstalowania i konfiguracji aplikacji
\end_layout

\begin_deeper
\begin_layout Itemize
Aplikacja dostarcza dokumentację
\begin_inset space \space{}
\end_inset

zainstalowania bibliotek potrzebnych do instalacji na danej platformie
\end_layout

\begin_layout Itemize
Aplikacja jest zaprojektowani w sposób przenośny (ang.
 
\emph on
portable
\emph default
), nie wymaga zapisania jakichkolwiek informacji w rejestrze czy ustawieniach
 systemu operacyjnego
\end_layout

\end_deeper
\begin_layout Subsection
Niezawodność
\end_layout

\begin_layout Enumerate
Odporność na błędy (and.
 
\emph on
failure recoverability
\emph default
) - zdolność do działania nawet po wystąpieniu błędu w aplikacji
\end_layout

\begin_deeper
\begin_layout Itemize
Błąd w czasie uruchomienia nie może powodować awarii całej aplikacji
\end_layout

\begin_layout Itemize
Aplikacja nie powinna narażać system operacyjny na niestabilność działania
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wstępna konstrukcja programu
\end_layout

\begin_layout Subparagraph

\series medium
Program powinien być skonstruowany w taki sposób, by oddzielić od siebie
 poszczególne elementy.
 Zapewni to łatwość rozszerzania aplikacji i naprawy błędów.
 Przewidziano następujące elementy aplikacji:
\end_layout

\begin_layout Itemize
Interfejs użytkownika
\end_layout

\begin_layout Itemize
Prezentacja map pamięci
\end_layout

\begin_layout Itemize
Manipulacja każdym elementem
\end_layout

\begin_layout Itemize
Interakcja z użytkownikiem
\end_layout

\begin_layout Itemize
Serializacja
\end_layout

\begin_layout Itemize
Interakcja z przeglądarką internetową
\end_layout

\begin_layout Subparagraph

\series medium
Interfejs dodawania mapy pamięci powinien działać jak najwydajniej, z uwagi
 na możliwość uruchomienia go na różnych platformach o różnej mocy obliczeniowej.
 Większość produktów programistycznych jest dostępnych w formie binarnej,
 i mimo dużej możliwości dostosowywania ich działania, czasami istnieje
 potrzeba głębszej modyfikacji, co nie zawsze jest możliwe.
 Dzięki społeczności OpenSource wiele rozwiązań posiada swoje kompilacje
 na różne platformy sprzętowe i systemowe, co w tym przypadku ma duże znaczenie.
 Przejawem tego podejścia jest użycie następujących technologii:
\end_layout

\begin_layout Itemize
Python - język programowania z otwartym kodem źródłowym
\end_layout

\begin_layout Itemize
QT - otwarty zbiór bibliotek programistycznych
\end_layout

\begin_layout Itemize
PyQT - nakładka biblioteki QT na język Python
\end_layout

\begin_layout Itemize
XUL, Javascript i XPCOM - zbór technologii wykorzystywany do tworzenia rozszerze
ń do produktów Mozilli
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Wykorzystane technologie i narzędzia
\end_layout

\begin_layout Subparagraph

\series medium
Głównym założeniem aplikacji jest możliwość uruchomienia jej na wielu platformac
h, bez potrzeby dostosowywania jej do każdej z nich.
 Ma być obsługiwana za pomocą klawiatury, myszki i ekranu dotykowego.
 Program ma działać szybko na komputerach o słabej mocy obliczeniowej, nie
 zamując dużo miejsca w pamięci operacyjnej.
\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Subparagraph

\series medium
Python jest interpretowanym, interaktywnym, zorientowanym obiektowo językiem
 programowania.
 Jego składnia jest bardzo charakterystyczna ze względu na umieszczanie
 wcięć w kodzie zamiast nawiasów.
 Jedną z charakterystycznych cech tego języka programowania jest tworzenie
 funkcji anonimowych jak również to, że wszystko jest obiektem.
 Istnieją setki gotowych modułów do Pythona która umożliwiają na użycie
 bibliotek napisanych w innych językach programowania [PYQT].
 
\end_layout

\begin_layout Subsection
Qt
\end_layout

\begin_layout Subparagraph

\series medium
QT jest zbiorem bibliotek stworzonych przez firmę Trolltech, następnie przejętą
 przez firmę Nokia.
 Obejmuje kilkaset klas odpowiedzialnych za projektowanie interfejsu 
\begin_inset Newline newline
\end_inset

użytkownika, programowanie wielowątkowe, współdzielenie pamięci, komunikację
 z bazami danych, grafikę OpenGL, dostęp do multimediów, obsługę XML, komunikacj
ę międzyprocesową, sieciową, grafikę wektorową i innych.
 Programy które używają tych bibliotek można uruchomić na następujących
 platformach: Linux, Windows, Mac OS X, Embedded Linux, Windows CE, Symbian
 i Maemo.
 Są też dostępne porty na inne platformy, jak iPhone, Android, webOS, openSolari
s czy OS/2.
 Bibliotek Qt można używać za pomocą języka C++, jednak dzięki zastosowaniu
 MOC (ang.
 
\emph on
Meta Object Compiler
\emph default
) jest możliwość pisania swoich aplikacji w innych językach programowania,
 takich jak Java, C#, Lisp, Pascal, Python czy Ruby [PYQT].
\end_layout

\begin_layout Subsection
PyQt
\end_layout

\begin_layout Subparagraph

\series medium
PyQt jest nakładką stworzoną by używać bibliotek QT wraz z językiem programowani
a Python.
 Została stworzona poprzez narzędzie SIP, które automatycznie generuje moduły
 Pythona z plików nagłówkowych bibliotek C++.
 To narzędzie zostało stworzone na potrzeby stworzenia tej nakładki, przez
 firmę Riverbank Computing [PYQT].
\end_layout

\begin_layout Subsection
Javascript, XUL i XPCOM
\end_layout

\begin_layout Subparagraph

\series medium
Javascript jest interpretowanym, obiektowym językiem programowania wykorzystywan
ym głównie na stronach internetowych.
 Stosuje się go głównie do zapewnienia interaktywności stron internetowych
 po stronie klienta
\end_layout

\begin_layout Subparagraph

\series medium
XUL (ang.
 
\emph on
XML-based User-interface Language
\emph default
) jest językiem XML przeznaczonym do definiownia interfejsów użytkownika.
 Jest używany głównie przez produkty fundacji Mozilli typu Firefox, Flock
 czy Thunderbird.
\end_layout

\begin_layout Subparagraph

\series medium
XPCOM (ang.
 
\emph on
Cross Platform Component Object Model
\emph default
) jest przenośną platformą obiektów COM, podobną do Microsoft COM.
 Posiada dowiązań do wielu języków programowania.
 Interfejsy w XPCOM są definiowane jako dialekty IDL (ang.
 
\emph on
Interface Definition Language
\emph default
) zwane XPIDL.
 XPCOM dostarcza zestaw componentów i klas pozwalających na zarządzanie
 plikami i pamięcią, wątki, struktury danych i inne.
 
\end_layout

\begin_layout Subparagraph

\series medium
Zestaw tych trzech technologii pozwala na tworzenie rozszerzeń do aplikacji
 Firefox i Thunderbird.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Architektura programu
\end_layout

\begin_layout Subparagraph

\series medium
Aplikacja została napisana w języku programowania Python w oparciu o biblioteki
 QT.
 
\end_layout

\begin_layout Subsection
Zarządzanie mapami pamięci
\end_layout

\begin_layout Subparagraph

\series medium
Głównym systemem zarządzającym obiektami na mapie pamięci oraz ich wyświetlaniem
 jest 
\emph on
Graphics View Framework 
\emph default
który jest zawarty w bibliotekach QT.
 Zawiera on 3 podstawowe elementy:
\end_layout

\begin_layout Itemize
QGraphicsScene - scena w której przechowywane są obiekty wraz z ich położeniem
\end_layout

\begin_layout Itemize
QGraphicsView - widok danej sceny
\end_layout

\begin_layout Itemize
QGraphicsItem - obiekt sceny
\end_layout

\begin_layout Subparagraph

\series medium
Scena jest kontenerem na obiekty, zapewniając szybki dostęp do nich.
 Jej zaletą jest zarządzanie stanem obiektów, detekcją kolizji i propagacją
 zdarzeń.
 QGraphicsScene używa algorytmu 
\emph on
Binary Space Positioning 
\emph default
do efektywnego zarządzania widzialnością danych obiektów.
 System propagacji zdarzeń wysyła zdarzenia do obiektów do których się dane
 zdarzenie odnosi.
 Jeżeli scena otrzyma zdarzenie kliknięcia myszą w danym miejscu, przekazuje
 to zdarzenie do obiektu który znajduje się na danej pozycji.
\end_layout

\begin_layout Subparagraph

\series medium
Widok dostarcza kontrolkę która wizualizuje zawartość sceny.
 Możliwe jest podłączenie wielu widoków do jednej sceny by zapewnić wiele
 rzutni na dany zbiór obiektów.
 Widok otrzymuje bezpośrednio zdarzenia klawiatury i myszki i tłumaczy je
 na zdarzenia sceny przetwarzając koordynaty widoku na koordynaty sceny.
\end_layout

\begin_layout Subparagraph

\series medium
Obiekt sceny jest bazową klasą dla każdego graficznego elementu sceny.
 Dostępne są również predefiniowane klasy dziedziczące po QGraphicsItem,
 definiując style rysowania elipsy, tekstu czy prostokąta [PYQT].
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/diagram1.png
	lyxscale 30
	width 85text%

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 9.1 Schemat UML elementów sceny
\end_layout

\begin_layout Subparagraph

\series medium
W aplikacji zostały wykorzystane wszystkie trzy klasy do stworzenia mechanizmu
 map pamięci.
 Z uwagi na zadowalającą funkcjonalność klasy QGraphicsScene nie było potrzeby
 jej rozszerzać, w przypadku pozostałych klas zaistniała potrzeba przeciążenia
 dużej części metod.
 
\end_layout

\begin_layout Subparagraph

\series medium
Klasa GraphicsView dziedziczy po klasie QGraphicsView i opisuje zarządzanie
 interakcją z użytkownikiem.
 Zaimplementowane są tam wszystkie funkcje związane ze zdarzeniami myszy
 oraz klawiatury, które odpowiadają za zaznaczanie, łączenie i 
\begin_inset Newline newline
\end_inset

rozłączanie obiektów, przesuwanie i zmienianie powiększenia widoku mapy
 oraz animacje obiektów.
 Schemat UML prezentuje rysunek 9.1.
\end_layout

\begin_layout Subparagraph

\series medium
Łączenie obiektów odbywa się na podstawie wykrywania kolizji.
 W metodzie mouseMoveEvent, przy przesuwaniu obiektu sprawdzane jest czy
 obiekty nie nachodzą na siebie i są łączone.
 Tworzy się nowy obiekt klasy Edge, który zostaje dodany do sceny a w obu
 łączonych obiektach klasy Node, do pola edgeList dołączana jest referencja
 na obiekt Edge.
\end_layout

\begin_layout Subparagraph

\series medium
Animacje w mapie pamięci odbywają się przy pomocy zegara QTimer zarządzanego
 przez klasę GraphicsView.
 W momencie gdy dany obiekt klasy Node zmienił swoją pozycję, zegar zostaje
 uruchomiony.
 Przy każdym impulsie zegara obliczane są nowe pozycje każdego elementu
 na podstawie odległości i połączeń między nimi, następnie pozycje są aktualizow
ane uwzględniając połączenia między nimi (obiekty klasy Edge).
 W momencie gdy po obliczeniu sił żaden z elementów nie zmienia swojego
 położenia, zegar zostaje zatrzymany by oszczędzić czas procesora.
\end_layout

\begin_layout Subparagraph

\series medium
Rysowanie i geometria poszczególnych elementów jest zaimplementowane w klasie
 Node i Edge.
 Za geometrię odpowiada metoda shape, która przekazuje do sceny informację
 jaki obszar zajmuje dany obiekt.
 Metoda paint rysuje element, który składa się z elipsy wypełnionej kolorem
 oraz tekstu.
 W momencie gdy funkcja paint jest uruchamiana, każde połączenie (Edge)
 pomiędzy obiektami zostaje również przerysowane, by ich linie płynnie się
 aktualizowały przy zmianie pozycji węzłów.
\end_layout

\begin_layout Subsection
System sygnałów i slotów
\end_layout

\begin_layout Subparagraph

\series medium
Biblioteka QT umożliwia na bardzo proste zarządzanie zdarzeniami na obiektach.
 Posiada ona system sygnałów i slotów, który implementuje wzorzec projektowy
 obserwatora (ang.
 
\emph on
Observer pattern
\emph default
).
 Obiekty mogą emitować sygnały (również z przekazywanymi wartościami) i
 inne obiekty mogą reagować na te sygnały podłączające je do slotów.
 Podejście takie jest bardzo elastyczne, gdyż do jednego slotu można podłączyć
 wiele sygnałów jak również sygnał może być obsługiwany przez wiele slotów.
 Każdy sygnał ma swoją nazwę po której jest identyfikowany i jest możliwe
 również przekazywanie wartości podczas emitowania sygnału.
 Niektóre obiekty zawierają predefiniowane sygnały i sloty, dzięki czemu
 można przekierowywać zdarzenia poszczególnych obiektów.
 Na przykład klasa QPushButton która implementuje przyciski na widżecie
 emituje sygnał 
\begin_inset Quotes eld
\end_inset

clicked()
\begin_inset Quotes erd
\end_inset

 w momencie kliknięcia na niego [PYQT].
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/diagram2.png
	lyxscale 30
	width 82text%
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 9.2 Schemat UML interfejsu użytkownika
\end_layout

\begin_layout Subparagraph

\series medium
System sygnałów i slotów jest wykorzystywany głównie w klasie 
\emph on
FormFromText
\emph default
 oraz 
\emph on
textEdit
\emph default
.
 Obiekt 
\emph on
pierwszej klasy
\emph default
 nasłuchuje sygnału o nazwie 
\begin_inset Quotes eld
\end_inset

addItemToList
\begin_inset Quotes erd
\end_inset

 który emitowany jest w momencie gdy zostaje zaznaczony tekst.
 Następnie tworzy w oknie dynamicznie dwa przyciski.
 Pierwszy zawiera tekst który został zaznaczony, drugi napis 
\begin_inset Quotes eld
\end_inset

X
\begin_inset Quotes erd
\end_inset

.
 Od razu do obu przycisków są podłączane sygnały kliknięcia, które są obsługiwan
e przez dwie metody w klasie FormFromText.
 Jeżeli użytkownik naciśnie pierwszy przycisk, zostaje emitowany sygnał
 
\begin_inset Quotes eld
\end_inset

addItem
\begin_inset Quotes erd
\end_inset

 który jest podłączony pośrednio do klasy 
\emph on
GraphicsView, 
\emph default
która otrzymuje informacje jaki tekst został wybrany i tworzy nowy element
 na scenie razem z tym tekstem.
 Jednak gdy użytkownik naciśnie drugi przycisk, oba przyciski zostają usunięte
 z okna.
 Schemat UML prezentuje rysunek 9.2.
\end_layout

\begin_layout Subsection
Interakcja z przeglądarką internetową
\end_layout

\begin_layout Subparagraph

\series medium
W celu zintegrowania przeglądarki internetowej Firefox z programem, koniecznym
 było stworzenie rozszerzenia.
 Jest to możliwe dzięki językowi Javascript, językowi opisu interfejsów
 użytkownika XUL oraz biblioteką XPCOM.
 Dodaje ono do menu kontekstowego nową pozycję z tekstem 
\begin_inset Quotes eld
\end_inset

Add to MindMap
\begin_inset Quotes erd
\end_inset

 za pomocą definicji w języku XUL.
 W momencie gdy użytkownik kliknął tą pozycję menu, uruchamia się funkcja
 w języku javascript, która sprawdza czy tekst został zaznaczony, następnie
 uruchamia aplikację do map pamięci z parametrami 
\begin_inset Quotes eld
\end_inset

--text
\begin_inset Quotes erd
\end_inset

 oraz ciągiem znaków zawierającym zaznaczony tekst.
 Aplikacja zostaje uruchomiona jako proces równorzędny, dzięki czemu przy
 zamknięciu przeglądarki internetowej możliwa jest dalsza praca z mapą pamięci.
 Jest to możliwe dzięki bibliotece XPCOM.
\end_layout

\begin_layout Subsection
Konstrukcja kodu źródłowego aplikacji
\end_layout

\begin_layout Subparagraph

\series medium
W aplikacji poszczególna funkcjonalność została od siebie odseparowana,
 umożliwiając łatwiejsze zrozumienie kodu źródłowego i dalszą rozbudowę.
 Większość klas dziedziczy po generycznych klasach biblioteki QT.
 Poszczególne funkcjonalności zostały zaimplementowane w następujących klasach:
\end_layout

\begin_layout Itemize
Główne okno programu - klasa Form
\end_layout

\begin_layout Itemize
Serializacja - funkcje serialize i deserialize w pliku serialize.py
\end_layout

\begin_layout Itemize
animowanie, rysowanie poszczególnych elementów mapy pamięci- klasy Node
 i Edge
\end_layout

\begin_layout Itemize
zarządzanie interakcją z użytkownikiem - klasa GraphicsItem
\end_layout

\begin_layout Itemize
tworzenie mapy pamięci z tekstu - klasy FormFromText oraz textEdit
\end_layout

\begin_layout Itemize
interakcja z przeglądarką internetową - pliki pluginu do przeglądarki
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Interfejs użytkownika
\end_layout

\begin_layout Subparagraph

\series medium
Z uwagi na lekką odmienność interfejsu użytkownika aplikacji od standardowych
 programów, w poniższym rozdziale zostanie omówiona interakcja programu
 z użytkownikiem.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_mainWindow.png
	lyxscale 30
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 10.1 Wygląd interfejsu użytkownika programu
\end_layout

\begin_layout Subparagraph

\series medium
Aplikacja ma bardzo prosty interfejs z uwagi na dostarczenie użytkownikowi
 jak największej przestrzeni do oglądania mapy pamięci.
 Ma to na celu umożliwienie pełnego skupienia się przy tworzeniu mapy.
 Główną część okna zajmuje widok mapy pamięci, wraz z paskiem menu programu.
 Rysunek 10.1 ilustruje wygląd interfejsu użytkownika.
 Interakcja z programem odbywa się za pomocą klawiatury i myszki.
 Zaleca się korzystanie z myszy zewnętrznej lub touchpada skonfigurowanego
 do naciskania środkowego przycisku myszy i funkcji rolki.
\end_layout

\begin_layout Subsection
Poruszanie się w widoku mapy pamięci
\end_layout

\begin_layout Subparagraph

\series medium
Przesuwanie widoku mapy pamięci odbywa się za pomocą naciśnięcia prawego
 lub środkowego przycisku i poruszania myszy.
 Zwiększanie lub zmniejszanie widoku wielkości mapy pamięci odbywa się za
 pomocą używania rolki na myszce.
 Należy zwrócić uwagę by nie był zaznaczony żaden element przy używaniu
 rolki.
\end_layout

\begin_layout Subsection
Manipulacja węzłami
\end_layout

\begin_layout Subparagraph

\series medium
By dodać nowy węzeł do mapy pamięci, należy kliknąć dwukrotnie na pustym
 miejscu w widoku mapy pamięci.
 Stworzy to nowy element i otworzy okno edycji tekstu i stylu węzła.
 Widok okna edycji pokazuje rys 9.2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_nodeEdit.png

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 10.2 Wygląd okna edycji węzła
\end_layout

\begin_layout Subparagraph

\series medium
Po zamknięciu okna edycji uaktualnia się wygląd węzła.
 Przywołać to okno można ponownie klikając dwukrotnie na obiekcie.
 By edytować wielkość węzła, należy zaznaczyć element i użyć rolki w myszce.
\end_layout

\begin_layout Subparagraph

\series medium
Zaznaczając dowolne elementy można je usunąć naciskając przycisk DELETE
 lub wybierając z górnego menu Edit->Delete.
\end_layout

\begin_layout Subparagraph

\series medium
Łączenie węzłów odbywa się poprzez przeciągnięcie dowolnego elementu na
 inny.
\end_layout

\begin_layout Subparagraph

\series medium
Rozłączanie węzłów odbywa się w analogiczny sposób co łączenie, tylko należy
 przy tej operacji trzymać wciśnięty przycisk CTRL i najechać elementem
 na inny który chcemy rozłączyć.
\end_layout

\begin_layout Subparagraph

\series medium
Zaznaczając element i naciskając środkowy przycisk myszki można sprawić,
 by element się nie animował i nie przemieszczał.
 Umożliwia to dokładnie pozycjonowanie elementów jeżeli automatyczne nie
 spełnia wymagań użytkownika.
\end_layout

\begin_layout Subsection
Dodawanie węzłów z tekstu
\end_layout

\begin_layout Subparagraph

\series medium
Kolejnym elementem interfejsu jest tworze mapy pamięci z tekstu ze strony
 internetowej.
 Jeżeli zainstalowany został dodatek do przeglądarki Firefox (proces instalacji
 jest omówiony w rozdziałe 12), można zaznaczyć w przeglądarce dowolny tekst,
 i z menu kontekstowego kliknąć pozycję 
\begin_inset Quotes eld
\end_inset

Add to Mindmap
\begin_inset Quotes erd
\end_inset

.
 Pojawi się wtedy okno tworzenia węzłów z tekstu.
 Interfejs tej funkcjonalności pokazuje Rys 9.3.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/app_nodeFromText.png
	lyxscale 80
	width 100text%
	rotateOrigin center
	groupId 1

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 10.3 Wygląd okna dodawania węzłów z tekstu
\end_layout

\begin_layout Subparagraph

\series medium
By przekształcić dany fragment tekstu na węzeł w mapie pamięci, należy za
 pomocą myszki zaznaczyć dany tekst.
 Po zaznaczeniu pojawią się dwa przyciski.
 Jeden (z zaznaczonym tekstem) służy do dodania go do mapy pamięci, drugi
 do usunięcia zaznaczenia tekstu.
 Po kliknięciu na przycisk z tekstem znikają oba przyciski i pojawia się
 węzeł na mapie pamięci.
 Po zdecydowaniu co zrobić z wszystkimi zaznaczeniami tekstu zostanie przycisk
 zamknięcia okienka.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Przykład użycia programu
\end_layout

\begin_layout Standard
By dobrze zrozumieć sposób działania aplikacji, należy przytoczyć przypadek
 użycia tworzenia kompletnej mapy pamięci.
 Zostało to przedstawione w tym rozdziale krok po kroku.
\end_layout

\begin_layout Subsection
Wybór tekstu
\end_layout

\begin_layout Standard
Najłatwiej tworzy się mapy pamięci na podstawie istniejącego tekstu.
 Ucząc się przy pomocy komputera, najczęstszym źródłem informacji są strony
 internetowe.
 Zakładamy, że użytkownik poprawnie zainstalował dodatek do przeglądarki
 internetowej.
 Pierwszym krokiem jest znalezienie strony internetowej z interesującą nas
 zawartością.
 Następnie zaznaczamy tekst z którego chcemy stworzyć mapę pamięci, klikamy
 prawym klawiszem nad zaznaczonym tekstem i wybieramy pozycję 
\begin_inset Quotes eld
\end_inset


\emph on
Add to MindMap
\emph default

\begin_inset Quotes erd
\end_inset

.
 Powyższe czynności obrazuje rysunek 11.1.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/tut1.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 11.1 Wygląd okna przeglądarki internetowej
\end_layout

\begin_layout Subsection
Wybór słów-kluczy
\end_layout

\begin_layout Standard
Następnym krokiem jest wybranie najważniejszych słów czy fraz które występują
 w tekście.
 Powinny być charakterystyczne i jednoznacznie kojarzyć się z tematem danej
 treści.
 Początkowy wygląd okna tworzenia mapy pamięci z tekstu prezentuje rysunek
 11.2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/tut2.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 11.2 Wygląd interfejsu programu po dodaniu tekstu 
\end_layout

\begin_layout Standard
Wybieramy odpowiednie słowa z których stworzymy węzły.
 W tym celu za pomocą myszy zaznaczamy odpowiednie słowa lub frazy, które
 pojawiają się z prawej strony okna.
 By dodać dane zaznaczenie do mapy pamięci, klikamy na przycisk z tekstem.
 By usunąć zaznaczenie, klikamy na przycisk z napisem 
\begin_inset Quotes eld
\end_inset

X
\begin_inset Quotes erd
\end_inset

.
 Rysunek 11.2 prezentuje ten proces.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/tut3.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 11.3 Wygląd interfejsu programu po dodaniu paru węzłów
\end_layout

\begin_layout Subsection
Dostosowanie mapy pamięci
\end_layout

\begin_layout Standard
Po wybraniu wszystkich elementów, możemy zamknąć okno z tekstem.
 Ostatnim krokiem jest dostosowanie i rozbudowanie swojej mapy pamięci do
 własnych potrzeb.
 Używając technik manipulacji węzłami opisanymi w poprzednim rozdziale układamy
 interesującą nas strukturę, kolory i wielkość mapy.
 Po zakończonej pracy możemy ją zapisać i wydrukować.
 Jest to przedstawione na rysunku 11.4.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/tut4.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\align center
Rys 11.4 Drukowanie mapy pamięci
\end_layout

\begin_layout Subsection
Uczenie się z mapy pamięci
\end_layout

\begin_layout Subparagraph

\series medium
Po stworzeniu mapy pamięci, oglądając ją po dłuższym czasie bardzo szybko
 można sobie uzmysłowić na podstawie jakich materiałów czy myśli była ona
 tworzona.
 Dzieje się tak dzięki relacjom pomiędzy węzłami.
 Ważnymi elementami na mapie są również wielkość i kolor danego elementu.
 
\end_layout

\begin_layout Subparagraph

\series medium
Jednak największą zaletą tworzenia mapy jest umiejętność osoby tworzącej
 powiązania procesu myślowego towarzyszącego tworzeniu z daną mapą.
 W zależności od czasu tworzenia mapy pamieci, możliwe jest przypomnienie
 sobie szczegółów podczas jej powstawania.
 Czym więcej czasu użytkownik poświęci na daną mapę, skupi się i przemyśli
 jej strukturę, tym większe są szanse na wyciągnięcie maksimum z niej.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Uruchamianie programu
\end_layout

\begin_layout Subparagraph

\series medium
Aplikacja posiada następujące wymagania systemowe:
\end_layout

\begin_layout Itemize
Interpreter języka Python w wersji 2.6 - 2.7
\end_layout

\begin_layout Itemize
Biblioteki QT w wersji 4.7 lub nowszej
\end_layout

\begin_layout Itemize
Nakładki PyQt w wersji 4.7 lub nowszej
\end_layout

\begin_layout Itemize
Przeglądarki internetowej Firefox w wersji 3.5 - 4.0 beta 10
\end_layout

\begin_layout Itemize
W przypadku systemu operacyjnego Windows, należy zainstalować pakiet 
\emph on
VC++ 2008 Redistributable Package.
 
\emph default
Jest on dostępny na stronie firmy Microsoft
\end_layout

\begin_layout Subparagraph

\series medium
By uruchomić program na systemach opartych z grupy Linux, należy zainstalować
 interpreter python, biblioteki QT oraz PyQt.
 W systemach opartych o dystrybucję Debian (np.
 Ubuntu, Mint) wystarczy wydać polecenie z terminalu z dostępem administracyjnym
:
\end_layout

\begin_layout Quotation

\series medium
\emph on
sudo apt-get install python python-qt4 libqt4-core libqt4-gui
\end_layout

\begin_layout Subparagraph

\series medium
Następnie uruchamiamy program za pomocą skryptu shellowego z flagą uruchomieniow
ą
\emph on
 runner.sh
\emph default
.
\end_layout

\begin_layout Subparagraph

\series medium
Do uruchomienia aplikacji pod systemami operacyjnymi z rodziny Microsoft
 Windows wystarczy odpakować archiwum 
\emph on
mindmapping-win32.zip
\emph default
 na dysku lokalnym i uruchomić plik wykonywalny 
\emph on
mindmapping.exe
\emph default
.
 
\end_layout

\begin_layout Subsection
Instalacja rozszerzenia do przeglądarki Firefox
\end_layout

\begin_layout Subparagraph

\series medium
Aplikacja posiada dwa osobne rozszerzenia, w zależności od systemu operacyjnego
 na którym zostaje uruchomiona.
 By zainstalować rozszerzenie, należy uruchomić przeglądarkę Firefox i wpisać
 w pasku adresu ścieżkę do pliku z rozszerzeniem.
 
\end_layout

\begin_layout Subparagraph

\series medium
W systemie operacyjnym Linux, gdy aplikację mamy w folderze 
\emph on
/home/user/mindmapping
\emph default
, wpisujemy:
\end_layout

\begin_layout Quotation

\series medium
\emph on
file:///home/user/mindmapping/mindmapping.xpi
\end_layout

\begin_layout Subparagraph

\series medium
Następnie po zainstalowaniu rozszerzenia i uruchomieniu ponownym przeglądarki
 musimy skonfigurować ścieżkę z której będzie uruchamiania aplikacja.
 W tym celu uruchamiamy Narzędzia->Dodatki, i w preferencjach rozszerzenia
 podajemy bezwzględną ścieżkę do pliku wykonywalnego.
 W systemie Linux musimy podać plik 
\emph on
runner.sh, 
\emph default
natomiast w systemie Windows mindmapping.exe.
\end_layout

\begin_layout Subsection
Uruchamiania aplikacji z argumentami
\end_layout

\begin_layout Subparagraph

\series medium
Domyślnym sposobem uruchomienia aplikacji jest uruchomienie go bez argumentów.
 Jest zalecany dla większości użytkowników.
 Tryb ten tworzy automatycznie nową, pustą mapę pamięci.
\end_layout

\begin_layout Subsubsection
Tryb tworzenia mapy pamięci z tekstu
\end_layout

\begin_layout Subparagraph

\series medium
Ten tryb jest potrzebny przy integracji z przeglądarką internetową.
 Przy uruchomieniu należy dodać dwa argumenty: 
\end_layout

\begin_layout Quotation

\series medium
np.

\emph on
 mindmapping.exe --text 
\begin_inset Quotes eld
\end_inset

Przykładowy tekst z którego chemy stworzyć mapę pamięci
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subparagraph

\series medium
Dzięki temu po uruchomieniu pojawią się dwa okna: główne okno z pustą mapą
 pamięci oraz dodatkowe z kreatorem węzłów z tekstu.
 Opis używania tego okna znajduje się w rozdziale 10.8.
 Wygląd aplikacji po uruchomieniu w tym trybie prezentuje rysunek 11.2.
\end_layout

\begin_layout Subsubsection
Tryb Wczytania pliku przy uruchomieniu
\end_layout

\begin_layout Subparagraph

\series medium
Przy integracji programu z systemem operacyjnym lub innym oprogramowaniem
 potrzebne jest również automatyczne wczytywanie aplikacji z zapisaną mapą
 pamięci.
 W tym przypadku należy dodać dwa argumenty: 
\end_layout

\begin_layout Quotation

\series medium
\emph on
--file /ścieżka/do/pliku.mindqt
\end_layout

\begin_layout Subparagraph

\series medium
Wszystkie zapisane pliki tego programu mają rozszerzenie 
\emph on
*.mindqt
\emph default
,
\emph on
 
\emph default
jednak możliwe jest wczytanie dowolnego pliku.
 Ważne jest tylko, by wczytywany plik został wcześniej zapisany w tej aplikacji,
 w przeciwnym razie aplikacja pokaże błąd wczytywania pliku.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Podsumowanie pracy
\end_layout

\begin_layout Subparagraph

\series medium
W ramach projektu pomyślnie ukończono implmentację aplikacji do tworzenia
 map pamięci spełniającą postawione cele.
 Zgodnie z założeniami umożliwia ona wygodne tworzenie map oraz interakcję
 z przeglądarką internetową.
 Zastosowanie otwartych technologii takich jak Python i QT sprawiło, że
 aplikacja działa wydajnie i jest odporna na błędy.
\end_layout

\begin_layout Subparagraph

\series medium
Aplikacja zostanie w przyszłości rozwijana by uzyskać w pełni funkcjonalny
 edytor map pamięci, mogący konkurować z istniejącymi produktami na rynku.
 Planowana jest również implementacja na platformy mobilne.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Bibliografia
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[BUZAN] Buzan Tony, 
\emph on
Mapy twoich myśli
\emph default
, Ravi, Łódź 2003
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[PSYCHO] Nęcki Edward, Orzechowski Jarosław, Szymura Błażej, 
\emph on
Psychologia poznawcza
\emph default
, PWN, Warszawa 2006
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[COGNI] Stilling Neil, Weisler Steven, Chase Christopher, 
\emph on
Cognitive Science an introduction
\emph default
, MIT Press, London 2005
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[PYQT] Summerfield Mar, Rapid GUI programming with Python and QT, Prentice
 Hall, New York 2008
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
[ISO] ISO/IEC 9126-1, Software engineering — Product quality — Part 1: Quality
 Model, June 2001
\end_layout

\end_body
\end_document
